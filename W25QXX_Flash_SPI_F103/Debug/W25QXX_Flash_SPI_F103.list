
W25QXX_Flash_SPI_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08002c10  08002c10  00012c10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  20000070  08002ef4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001a0  08002ef4  000201a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c23a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d0c  00000000  00000000  0002c2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004984  00000000  00000000  0002dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007e0  00000000  00000000  00032968  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a08  00000000  00000000  00033148  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f91  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c8e  00000000  00000000  00037ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a76f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001964  00000000  00000000  0003a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf8 	.word	0x08002bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002bf8 	.word	0x08002bf8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f892 	bl	800029c <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 f968 	bl	8001490 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000d8 	.word	0x200000d8

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfa9      	itett	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	b2d2      	uxtbge	r2, r2
 8000280:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfbb      	ittet	lt
 8000286:	f000 000f 	andlt.w	r0, r0, #15
 800028a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	541a      	strblt	r2, [r3, r0]
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20a      	bcs.n	80002ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002cc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002ce:	4626      	mov	r6, r4
 80002d0:	4b66      	ldr	r3, [pc, #408]	; (800046c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002d2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800047c <HAL_GPIO_Init+0x1b4>
 80002d6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000480 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002da:	680a      	ldr	r2, [r1, #0]
 80002dc:	fa32 f506 	lsrs.w	r5, r2, r6
 80002e0:	d102      	bne.n	80002e8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002e2:	b003      	add	sp, #12
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002e8:	f04f 0801 	mov.w	r8, #1
 80002ec:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002f4:	4590      	cmp	r8, r2
 80002f6:	d17f      	bne.n	80003f8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002f8:	684d      	ldr	r5, [r1, #4]
 80002fa:	2d12      	cmp	r5, #18
 80002fc:	f000 80aa 	beq.w	8000454 <HAL_GPIO_Init+0x18c>
 8000300:	f200 8083 	bhi.w	800040a <HAL_GPIO_Init+0x142>
 8000304:	2d02      	cmp	r5, #2
 8000306:	f000 80a2 	beq.w	800044e <HAL_GPIO_Init+0x186>
 800030a:	d877      	bhi.n	80003fc <HAL_GPIO_Init+0x134>
 800030c:	2d00      	cmp	r5, #0
 800030e:	f000 8089 	beq.w	8000424 <HAL_GPIO_Init+0x15c>
 8000312:	2d01      	cmp	r5, #1
 8000314:	f000 8099 	beq.w	800044a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000318:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031c:	2aff      	cmp	r2, #255	; 0xff
 800031e:	bf93      	iteet	ls
 8000320:	4682      	movls	sl, r0
 8000322:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000326:	3d08      	subhi	r5, #8
 8000328:	f8d0 b000 	ldrls.w	fp, [r0]
 800032c:	bf92      	itee	ls
 800032e:	00b5      	lslls	r5, r6, #2
 8000330:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000334:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000336:	fa09 f805 	lsl.w	r8, r9, r5
 800033a:	ea2b 0808 	bic.w	r8, fp, r8
 800033e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000342:	bf88      	it	hi
 8000344:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000348:	ea48 0505 	orr.w	r5, r8, r5
 800034c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000350:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000354:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000358:	d04e      	beq.n	80003f8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800035a:	4d45      	ldr	r5, [pc, #276]	; (8000470 <HAL_GPIO_Init+0x1a8>)
 800035c:	4f44      	ldr	r7, [pc, #272]	; (8000470 <HAL_GPIO_Init+0x1a8>)
 800035e:	69ad      	ldr	r5, [r5, #24]
 8000360:	f026 0803 	bic.w	r8, r6, #3
 8000364:	f045 0501 	orr.w	r5, r5, #1
 8000368:	61bd      	str	r5, [r7, #24]
 800036a:	69bd      	ldr	r5, [r7, #24]
 800036c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000370:	f005 0501 	and.w	r5, r5, #1
 8000374:	9501      	str	r5, [sp, #4]
 8000376:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800037a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000380:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000384:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000388:	fa09 f90b 	lsl.w	r9, r9, fp
 800038c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000390:	4d38      	ldr	r5, [pc, #224]	; (8000474 <HAL_GPIO_Init+0x1ac>)
 8000392:	42a8      	cmp	r0, r5
 8000394:	d063      	beq.n	800045e <HAL_GPIO_Init+0x196>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	d061      	beq.n	8000462 <HAL_GPIO_Init+0x19a>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d05f      	beq.n	8000466 <HAL_GPIO_Init+0x19e>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	bf0c      	ite	eq
 80003ae:	2503      	moveq	r5, #3
 80003b0:	2504      	movne	r5, #4
 80003b2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003ba:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003be:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003c0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c8:	4395      	biceq	r5, r2
 80003ca:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003cc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ce:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d6:	4395      	biceq	r5, r2
 80003d8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003da:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003dc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e0:	bf14      	ite	ne
 80003e2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e4:	4395      	biceq	r5, r2
 80003e6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ea:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ee:	bf14      	ite	ne
 80003f0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003f2:	ea25 0202 	biceq.w	r2, r5, r2
 80003f6:	60da      	str	r2, [r3, #12]
	position++;
 80003f8:	3601      	adds	r6, #1
 80003fa:	e76e      	b.n	80002da <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003fc:	2d03      	cmp	r5, #3
 80003fe:	d022      	beq.n	8000446 <HAL_GPIO_Init+0x17e>
 8000400:	2d11      	cmp	r5, #17
 8000402:	d189      	bne.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000404:	68cc      	ldr	r4, [r1, #12]
 8000406:	3404      	adds	r4, #4
          break;
 8000408:	e786      	b.n	8000318 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800040a:	4f1b      	ldr	r7, [pc, #108]	; (8000478 <HAL_GPIO_Init+0x1b0>)
 800040c:	42bd      	cmp	r5, r7
 800040e:	d009      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 8000410:	d812      	bhi.n	8000438 <HAL_GPIO_Init+0x170>
 8000412:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000484 <HAL_GPIO_Init+0x1bc>
 8000416:	454d      	cmp	r5, r9
 8000418:	d004      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 800041a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800041e:	454d      	cmp	r5, r9
 8000420:	f47f af7a 	bne.w	8000318 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000424:	688c      	ldr	r4, [r1, #8]
 8000426:	b1c4      	cbz	r4, 800045a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000428:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800042a:	bf0c      	ite	eq
 800042c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000430:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000434:	2408      	movs	r4, #8
 8000436:	e76f      	b.n	8000318 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000438:	4575      	cmp	r5, lr
 800043a:	d0f3      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 800043c:	4565      	cmp	r5, ip
 800043e:	d0f1      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 8000440:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000488 <HAL_GPIO_Init+0x1c0>
 8000444:	e7eb      	b.n	800041e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000446:	2400      	movs	r4, #0
 8000448:	e766      	b.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800044a:	68cc      	ldr	r4, [r1, #12]
          break;
 800044c:	e764      	b.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800044e:	68cc      	ldr	r4, [r1, #12]
 8000450:	3408      	adds	r4, #8
          break;
 8000452:	e761      	b.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000454:	68cc      	ldr	r4, [r1, #12]
 8000456:	340c      	adds	r4, #12
          break;
 8000458:	e75e      	b.n	8000318 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800045a:	2404      	movs	r4, #4
 800045c:	e75c      	b.n	8000318 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800045e:	2500      	movs	r5, #0
 8000460:	e7a7      	b.n	80003b2 <HAL_GPIO_Init+0xea>
 8000462:	2501      	movs	r5, #1
 8000464:	e7a5      	b.n	80003b2 <HAL_GPIO_Init+0xea>
 8000466:	2502      	movs	r5, #2
 8000468:	e7a3      	b.n	80003b2 <HAL_GPIO_Init+0xea>
 800046a:	bf00      	nop
 800046c:	40010400 	.word	0x40010400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800
 8000478:	10210000 	.word	0x10210000
 800047c:	10310000 	.word	0x10310000
 8000480:	10320000 	.word	0x10320000
 8000484:	10110000 	.word	0x10110000
 8000488:	10220000 	.word	0x10220000

0800048c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800048c:	b10a      	cbz	r2, 8000492 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800048e:	6101      	str	r1, [r0, #16]
 8000490:	4770      	bx	lr
 8000492:	0409      	lsls	r1, r1, #16
 8000494:	e7fb      	b.n	800048e <HAL_GPIO_WritePin+0x2>
	...

08000498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800049c:	4605      	mov	r5, r0
 800049e:	b908      	cbnz	r0, 80004a4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e03c      	b.n	800051e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a4:	6803      	ldr	r3, [r0, #0]
 80004a6:	07db      	lsls	r3, r3, #31
 80004a8:	d410      	bmi.n	80004cc <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004aa:	682b      	ldr	r3, [r5, #0]
 80004ac:	079f      	lsls	r7, r3, #30
 80004ae:	d45d      	bmi.n	800056c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004b0:	682b      	ldr	r3, [r5, #0]
 80004b2:	0719      	lsls	r1, r3, #28
 80004b4:	f100 8094 	bmi.w	80005e0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004b8:	682b      	ldr	r3, [r5, #0]
 80004ba:	075a      	lsls	r2, r3, #29
 80004bc:	f100 80be 	bmi.w	800063c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004c0:	69e8      	ldr	r0, [r5, #28]
 80004c2:	2800      	cmp	r0, #0
 80004c4:	f040 812c 	bne.w	8000720 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004c8:	2000      	movs	r0, #0
 80004ca:	e028      	b.n	800051e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004cc:	4c8f      	ldr	r4, [pc, #572]	; (800070c <HAL_RCC_OscConfig+0x274>)
 80004ce:	6863      	ldr	r3, [r4, #4]
 80004d0:	f003 030c 	and.w	r3, r3, #12
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d007      	beq.n	80004e8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004d8:	6863      	ldr	r3, [r4, #4]
 80004da:	f003 030c 	and.w	r3, r3, #12
 80004de:	2b08      	cmp	r3, #8
 80004e0:	d109      	bne.n	80004f6 <HAL_RCC_OscConfig+0x5e>
 80004e2:	6863      	ldr	r3, [r4, #4]
 80004e4:	03de      	lsls	r6, r3, #15
 80004e6:	d506      	bpl.n	80004f6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004e8:	6823      	ldr	r3, [r4, #0]
 80004ea:	039c      	lsls	r4, r3, #14
 80004ec:	d5dd      	bpl.n	80004aa <HAL_RCC_OscConfig+0x12>
 80004ee:	686b      	ldr	r3, [r5, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1da      	bne.n	80004aa <HAL_RCC_OscConfig+0x12>
 80004f4:	e7d4      	b.n	80004a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004f6:	686b      	ldr	r3, [r5, #4]
 80004f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004fc:	d112      	bne.n	8000524 <HAL_RCC_OscConfig+0x8c>
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000504:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000506:	f7ff fe6b 	bl	80001e0 <HAL_GetTick>
 800050a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800050c:	6823      	ldr	r3, [r4, #0]
 800050e:	0398      	lsls	r0, r3, #14
 8000510:	d4cb      	bmi.n	80004aa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000512:	f7ff fe65 	bl	80001e0 <HAL_GetTick>
 8000516:	1b80      	subs	r0, r0, r6
 8000518:	2864      	cmp	r0, #100	; 0x64
 800051a:	d9f7      	bls.n	800050c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800051c:	2003      	movs	r0, #3
}
 800051e:	b002      	add	sp, #8
 8000520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000524:	b99b      	cbnz	r3, 800054e <HAL_RCC_OscConfig+0xb6>
 8000526:	6823      	ldr	r3, [r4, #0]
 8000528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052c:	6023      	str	r3, [r4, #0]
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000534:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000536:	f7ff fe53 	bl	80001e0 <HAL_GetTick>
 800053a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	0399      	lsls	r1, r3, #14
 8000540:	d5b3      	bpl.n	80004aa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000542:	f7ff fe4d 	bl	80001e0 <HAL_GetTick>
 8000546:	1b80      	subs	r0, r0, r6
 8000548:	2864      	cmp	r0, #100	; 0x64
 800054a:	d9f7      	bls.n	800053c <HAL_RCC_OscConfig+0xa4>
 800054c:	e7e6      	b.n	800051c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	d103      	bne.n	800055e <HAL_RCC_OscConfig+0xc6>
 8000556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055a:	6023      	str	r3, [r4, #0]
 800055c:	e7cf      	b.n	80004fe <HAL_RCC_OscConfig+0x66>
 800055e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	6823      	ldr	r3, [r4, #0]
 8000566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056a:	e7cb      	b.n	8000504 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800056c:	4c67      	ldr	r4, [pc, #412]	; (800070c <HAL_RCC_OscConfig+0x274>)
 800056e:	6863      	ldr	r3, [r4, #4]
 8000570:	f013 0f0c 	tst.w	r3, #12
 8000574:	d007      	beq.n	8000586 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000576:	6863      	ldr	r3, [r4, #4]
 8000578:	f003 030c 	and.w	r3, r3, #12
 800057c:	2b08      	cmp	r3, #8
 800057e:	d110      	bne.n	80005a2 <HAL_RCC_OscConfig+0x10a>
 8000580:	6863      	ldr	r3, [r4, #4]
 8000582:	03da      	lsls	r2, r3, #15
 8000584:	d40d      	bmi.n	80005a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	079b      	lsls	r3, r3, #30
 800058a:	d502      	bpl.n	8000592 <HAL_RCC_OscConfig+0xfa>
 800058c:	692b      	ldr	r3, [r5, #16]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d186      	bne.n	80004a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	696a      	ldr	r2, [r5, #20]
 8000596:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800059a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800059e:	6023      	str	r3, [r4, #0]
 80005a0:	e786      	b.n	80004b0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a2:	692a      	ldr	r2, [r5, #16]
 80005a4:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <HAL_RCC_OscConfig+0x278>)
 80005a6:	b16a      	cbz	r2, 80005c4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ac:	f7ff fe18 	bl	80001e0 <HAL_GetTick>
 80005b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	079f      	lsls	r7, r3, #30
 80005b6:	d4ec      	bmi.n	8000592 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005b8:	f7ff fe12 	bl	80001e0 <HAL_GetTick>
 80005bc:	1b80      	subs	r0, r0, r6
 80005be:	2802      	cmp	r0, #2
 80005c0:	d9f7      	bls.n	80005b2 <HAL_RCC_OscConfig+0x11a>
 80005c2:	e7ab      	b.n	800051c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c6:	f7ff fe0b 	bl	80001e0 <HAL_GetTick>
 80005ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	0798      	lsls	r0, r3, #30
 80005d0:	f57f af6e 	bpl.w	80004b0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005d4:	f7ff fe04 	bl	80001e0 <HAL_GetTick>
 80005d8:	1b80      	subs	r0, r0, r6
 80005da:	2802      	cmp	r0, #2
 80005dc:	d9f6      	bls.n	80005cc <HAL_RCC_OscConfig+0x134>
 80005de:	e79d      	b.n	800051c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e0:	69aa      	ldr	r2, [r5, #24]
 80005e2:	4c4a      	ldr	r4, [pc, #296]	; (800070c <HAL_RCC_OscConfig+0x274>)
 80005e4:	4b4b      	ldr	r3, [pc, #300]	; (8000714 <HAL_RCC_OscConfig+0x27c>)
 80005e6:	b1da      	cbz	r2, 8000620 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005ec:	f7ff fdf8 	bl	80001e0 <HAL_GetTick>
 80005f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f4:	079b      	lsls	r3, r3, #30
 80005f6:	d50d      	bpl.n	8000614 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <HAL_RCC_OscConfig+0x280>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	fbb3 f3f2 	udiv	r3, r3, r2
 8000604:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000606:	bf00      	nop
  }
  while (Delay --);
 8000608:	9b01      	ldr	r3, [sp, #4]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f9      	bne.n	8000606 <HAL_RCC_OscConfig+0x16e>
 8000612:	e751      	b.n	80004b8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000614:	f7ff fde4 	bl	80001e0 <HAL_GetTick>
 8000618:	1b80      	subs	r0, r0, r6
 800061a:	2802      	cmp	r0, #2
 800061c:	d9e9      	bls.n	80005f2 <HAL_RCC_OscConfig+0x15a>
 800061e:	e77d      	b.n	800051c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000620:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000622:	f7ff fddd 	bl	80001e0 <HAL_GetTick>
 8000626:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800062a:	079f      	lsls	r7, r3, #30
 800062c:	f57f af44 	bpl.w	80004b8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000630:	f7ff fdd6 	bl	80001e0 <HAL_GetTick>
 8000634:	1b80      	subs	r0, r0, r6
 8000636:	2802      	cmp	r0, #2
 8000638:	d9f6      	bls.n	8000628 <HAL_RCC_OscConfig+0x190>
 800063a:	e76f      	b.n	800051c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800063c:	4c33      	ldr	r4, [pc, #204]	; (800070c <HAL_RCC_OscConfig+0x274>)
 800063e:	69e3      	ldr	r3, [r4, #28]
 8000640:	00d8      	lsls	r0, r3, #3
 8000642:	d424      	bmi.n	800068e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000644:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	69e3      	ldr	r3, [r4, #28]
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61e3      	str	r3, [r4, #28]
 800064e:	69e3      	ldr	r3, [r4, #28]
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000658:	4e30      	ldr	r6, [pc, #192]	; (800071c <HAL_RCC_OscConfig+0x284>)
 800065a:	6833      	ldr	r3, [r6, #0]
 800065c:	05d9      	lsls	r1, r3, #23
 800065e:	d518      	bpl.n	8000692 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000660:	68eb      	ldr	r3, [r5, #12]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d126      	bne.n	80006b4 <HAL_RCC_OscConfig+0x21c>
 8000666:	6a23      	ldr	r3, [r4, #32]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800066e:	f7ff fdb7 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000672:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000676:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000678:	6a23      	ldr	r3, [r4, #32]
 800067a:	079b      	lsls	r3, r3, #30
 800067c:	d53f      	bpl.n	80006fe <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800067e:	2f00      	cmp	r7, #0
 8000680:	f43f af1e 	beq.w	80004c0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000684:	69e3      	ldr	r3, [r4, #28]
 8000686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800068a:	61e3      	str	r3, [r4, #28]
 800068c:	e718      	b.n	80004c0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800068e:	2700      	movs	r7, #0
 8000690:	e7e2      	b.n	8000658 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000692:	6833      	ldr	r3, [r6, #0]
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800069a:	f7ff fda1 	bl	80001e0 <HAL_GetTick>
 800069e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a0:	6833      	ldr	r3, [r6, #0]
 80006a2:	05da      	lsls	r2, r3, #23
 80006a4:	d4dc      	bmi.n	8000660 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006a6:	f7ff fd9b 	bl	80001e0 <HAL_GetTick>
 80006aa:	eba0 0008 	sub.w	r0, r0, r8
 80006ae:	2864      	cmp	r0, #100	; 0x64
 80006b0:	d9f6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x208>
 80006b2:	e733      	b.n	800051c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b4:	b9ab      	cbnz	r3, 80006e2 <HAL_RCC_OscConfig+0x24a>
 80006b6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	6223      	str	r3, [r4, #32]
 80006c2:	6a23      	ldr	r3, [r4, #32]
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ca:	f7ff fd89 	bl	80001e0 <HAL_GetTick>
 80006ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d0:	6a23      	ldr	r3, [r4, #32]
 80006d2:	0798      	lsls	r0, r3, #30
 80006d4:	d5d3      	bpl.n	800067e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006d6:	f7ff fd83 	bl	80001e0 <HAL_GetTick>
 80006da:	1b80      	subs	r0, r0, r6
 80006dc:	4540      	cmp	r0, r8
 80006de:	d9f7      	bls.n	80006d0 <HAL_RCC_OscConfig+0x238>
 80006e0:	e71c      	b.n	800051c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e2:	2b05      	cmp	r3, #5
 80006e4:	6a23      	ldr	r3, [r4, #32]
 80006e6:	d103      	bne.n	80006f0 <HAL_RCC_OscConfig+0x258>
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6223      	str	r3, [r4, #32]
 80006ee:	e7ba      	b.n	8000666 <HAL_RCC_OscConfig+0x1ce>
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	6223      	str	r3, [r4, #32]
 80006f6:	6a23      	ldr	r3, [r4, #32]
 80006f8:	f023 0304 	bic.w	r3, r3, #4
 80006fc:	e7b6      	b.n	800066c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006fe:	f7ff fd6f 	bl	80001e0 <HAL_GetTick>
 8000702:	eba0 0008 	sub.w	r0, r0, r8
 8000706:	42b0      	cmp	r0, r6
 8000708:	d9b6      	bls.n	8000678 <HAL_RCC_OscConfig+0x1e0>
 800070a:	e707      	b.n	800051c <HAL_RCC_OscConfig+0x84>
 800070c:	40021000 	.word	0x40021000
 8000710:	42420000 	.word	0x42420000
 8000714:	42420480 	.word	0x42420480
 8000718:	20000008 	.word	0x20000008
 800071c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <HAL_RCC_OscConfig+0x334>)
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	461c      	mov	r4, r3
 8000726:	f002 020c 	and.w	r2, r2, #12
 800072a:	2a08      	cmp	r2, #8
 800072c:	d03d      	beq.n	80007aa <HAL_RCC_OscConfig+0x312>
 800072e:	2300      	movs	r3, #0
 8000730:	4e27      	ldr	r6, [pc, #156]	; (80007d0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000732:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000734:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000736:	d12b      	bne.n	8000790 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000738:	f7ff fd52 	bl	80001e0 <HAL_GetTick>
 800073c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	0199      	lsls	r1, r3, #6
 8000742:	d41f      	bmi.n	8000784 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000744:	6a2b      	ldr	r3, [r5, #32]
 8000746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800074a:	d105      	bne.n	8000758 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800074c:	6862      	ldr	r2, [r4, #4]
 800074e:	68a9      	ldr	r1, [r5, #8]
 8000750:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000754:	430a      	orrs	r2, r1
 8000756:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000758:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800075a:	6862      	ldr	r2, [r4, #4]
 800075c:	430b      	orrs	r3, r1
 800075e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000762:	4313      	orrs	r3, r2
 8000764:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000766:	2301      	movs	r3, #1
 8000768:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800076a:	f7ff fd39 	bl	80001e0 <HAL_GetTick>
 800076e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	019a      	lsls	r2, r3, #6
 8000774:	f53f aea8 	bmi.w	80004c8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000778:	f7ff fd32 	bl	80001e0 <HAL_GetTick>
 800077c:	1b40      	subs	r0, r0, r5
 800077e:	2802      	cmp	r0, #2
 8000780:	d9f6      	bls.n	8000770 <HAL_RCC_OscConfig+0x2d8>
 8000782:	e6cb      	b.n	800051c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000784:	f7ff fd2c 	bl	80001e0 <HAL_GetTick>
 8000788:	1bc0      	subs	r0, r0, r7
 800078a:	2802      	cmp	r0, #2
 800078c:	d9d7      	bls.n	800073e <HAL_RCC_OscConfig+0x2a6>
 800078e:	e6c5      	b.n	800051c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000790:	f7ff fd26 	bl	80001e0 <HAL_GetTick>
 8000794:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	019b      	lsls	r3, r3, #6
 800079a:	f57f ae95 	bpl.w	80004c8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800079e:	f7ff fd1f 	bl	80001e0 <HAL_GetTick>
 80007a2:	1b40      	subs	r0, r0, r5
 80007a4:	2802      	cmp	r0, #2
 80007a6:	d9f6      	bls.n	8000796 <HAL_RCC_OscConfig+0x2fe>
 80007a8:	e6b8      	b.n	800051c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007aa:	2801      	cmp	r0, #1
 80007ac:	f43f aeb7 	beq.w	800051e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007b0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007b2:	6a2b      	ldr	r3, [r5, #32]
 80007b4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f47f ae71 	bne.w	80004a0 <HAL_RCC_OscConfig+0x8>
 80007be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007c0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007c4:	1ac0      	subs	r0, r0, r3
 80007c6:	bf18      	it	ne
 80007c8:	2001      	movne	r0, #1
 80007ca:	e6a8      	b.n	800051e <HAL_RCC_OscConfig+0x86>
 80007cc:	40021000 	.word	0x40021000
 80007d0:	42420060 	.word	0x42420060

080007d4 <HAL_RCC_GetSysClockFreq>:
{
 80007d4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007d8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007da:	ac02      	add	r4, sp, #8
 80007dc:	f103 0510 	add.w	r5, r3, #16
 80007e0:	4622      	mov	r2, r4
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	6859      	ldr	r1, [r3, #4]
 80007e6:	3308      	adds	r3, #8
 80007e8:	c203      	stmia	r2!, {r0, r1}
 80007ea:	42ab      	cmp	r3, r5
 80007ec:	4614      	mov	r4, r2
 80007ee:	d1f7      	bne.n	80007e0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f0:	2301      	movs	r3, #1
 80007f2:	f88d 3004 	strb.w	r3, [sp, #4]
 80007f6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007f8:	4911      	ldr	r1, [pc, #68]	; (8000840 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007fa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007fe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000800:	f003 020c 	and.w	r2, r3, #12
 8000804:	2a08      	cmp	r2, #8
 8000806:	d117      	bne.n	8000838 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000808:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800080c:	a806      	add	r0, sp, #24
 800080e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000810:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000812:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000816:	d50c      	bpl.n	8000832 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000818:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800081a:	480a      	ldr	r0, [pc, #40]	; (8000844 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800081c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000820:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000822:	aa06      	add	r2, sp, #24
 8000824:	4413      	add	r3, r2
 8000826:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800082a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800082e:	b007      	add	sp, #28
 8000830:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_RCC_GetSysClockFreq+0x74>)
 8000834:	4350      	muls	r0, r2
 8000836:	e7fa      	b.n	800082e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800083a:	e7f8      	b.n	800082e <HAL_RCC_GetSysClockFreq+0x5a>
 800083c:	08002c10 	.word	0x08002c10
 8000840:	40021000 	.word	0x40021000
 8000844:	007a1200 	.word	0x007a1200
 8000848:	003d0900 	.word	0x003d0900

0800084c <HAL_RCC_ClockConfig>:
{
 800084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000850:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000852:	4604      	mov	r4, r0
 8000854:	b910      	cbnz	r0, 800085c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000856:	2001      	movs	r0, #1
 8000858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800085c:	4a45      	ldr	r2, [pc, #276]	; (8000974 <HAL_RCC_ClockConfig+0x128>)
 800085e:	6813      	ldr	r3, [r2, #0]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	428b      	cmp	r3, r1
 8000866:	d329      	bcc.n	80008bc <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000868:	6821      	ldr	r1, [r4, #0]
 800086a:	078e      	lsls	r6, r1, #30
 800086c:	d431      	bmi.n	80008d2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800086e:	07ca      	lsls	r2, r1, #31
 8000870:	d444      	bmi.n	80008fc <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000872:	4a40      	ldr	r2, [pc, #256]	; (8000974 <HAL_RCC_ClockConfig+0x128>)
 8000874:	6813      	ldr	r3, [r2, #0]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	429d      	cmp	r5, r3
 800087c:	d367      	bcc.n	800094e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800087e:	6822      	ldr	r2, [r4, #0]
 8000880:	4d3d      	ldr	r5, [pc, #244]	; (8000978 <HAL_RCC_ClockConfig+0x12c>)
 8000882:	f012 0f04 	tst.w	r2, #4
 8000886:	d16e      	bne.n	8000966 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000888:	0713      	lsls	r3, r2, #28
 800088a:	d506      	bpl.n	800089a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800088c:	686b      	ldr	r3, [r5, #4]
 800088e:	6922      	ldr	r2, [r4, #16]
 8000890:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000894:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000898:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800089a:	f7ff ff9b 	bl	80007d4 <HAL_RCC_GetSysClockFreq>
 800089e:	686b      	ldr	r3, [r5, #4]
 80008a0:	4a36      	ldr	r2, [pc, #216]	; (800097c <HAL_RCC_ClockConfig+0x130>)
 80008a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <HAL_RCC_ClockConfig+0x134>)
 80008ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <HAL_RCC_ClockConfig+0x138>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f7ff fc53 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008b6:	2000      	movs	r0, #0
 80008b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	f023 0307 	bic.w	r3, r3, #7
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d1c2      	bne.n	8000856 <HAL_RCC_ClockConfig+0xa>
 80008d0:	e7ca      	b.n	8000868 <HAL_RCC_ClockConfig+0x1c>
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008d4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008d8:	bf1e      	ittt	ne
 80008da:	685a      	ldrne	r2, [r3, #4]
 80008dc:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008e0:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008e2:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008e4:	bf42      	ittt	mi
 80008e6:	685a      	ldrmi	r2, [r3, #4]
 80008e8:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008ec:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	68a0      	ldr	r0, [r4, #8]
 80008f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008f6:	4302      	orrs	r2, r0
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	e7b8      	b.n	800086e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008fc:	6862      	ldr	r2, [r4, #4]
 80008fe:	4e1e      	ldr	r6, [pc, #120]	; (8000978 <HAL_RCC_ClockConfig+0x12c>)
 8000900:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000904:	d11b      	bne.n	800093e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000906:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090a:	d0a4      	beq.n	8000856 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800090c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800090e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000912:	f023 0303 	bic.w	r3, r3, #3
 8000916:	4313      	orrs	r3, r2
 8000918:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800091a:	f7ff fc61 	bl	80001e0 <HAL_GetTick>
 800091e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000920:	6873      	ldr	r3, [r6, #4]
 8000922:	6862      	ldr	r2, [r4, #4]
 8000924:	f003 030c 	and.w	r3, r3, #12
 8000928:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800092c:	d0a1      	beq.n	8000872 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800092e:	f7ff fc57 	bl	80001e0 <HAL_GetTick>
 8000932:	1bc0      	subs	r0, r0, r7
 8000934:	4540      	cmp	r0, r8
 8000936:	d9f3      	bls.n	8000920 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000938:	2003      	movs	r0, #3
}
 800093a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800093e:	2a02      	cmp	r2, #2
 8000940:	d102      	bne.n	8000948 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000942:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000946:	e7e0      	b.n	800090a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000948:	f013 0f02 	tst.w	r3, #2
 800094c:	e7dd      	b.n	800090a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f023 0307 	bic.w	r3, r3, #7
 8000954:	432b      	orrs	r3, r5
 8000956:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000958:	6813      	ldr	r3, [r2, #0]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	429d      	cmp	r5, r3
 8000960:	f47f af79 	bne.w	8000856 <HAL_RCC_ClockConfig+0xa>
 8000964:	e78b      	b.n	800087e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000966:	686b      	ldr	r3, [r5, #4]
 8000968:	68e1      	ldr	r1, [r4, #12]
 800096a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800096e:	430b      	orrs	r3, r1
 8000970:	606b      	str	r3, [r5, #4]
 8000972:	e789      	b.n	8000888 <HAL_RCC_ClockConfig+0x3c>
 8000974:	40022000 	.word	0x40022000
 8000978:	40021000 	.word	0x40021000
 800097c:	08002c7e 	.word	0x08002c7e
 8000980:	20000008 	.word	0x20000008
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <HAL_RCC_GetPCLK1Freq+0x14>)
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000992:	5cd3      	ldrb	r3, [r2, r3]
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000996:	6810      	ldr	r0, [r2, #0]
}
 8000998:	40d8      	lsrs	r0, r3
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	08002c8e 	.word	0x08002c8e
 80009a4:	20000008 	.word	0x20000008

080009a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009b6:	6810      	ldr	r0, [r2, #0]
}
 80009b8:	40d8      	lsrs	r0, r3
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000
 80009c0:	08002c8e 	.word	0x08002c8e
 80009c4:	20000008 	.word	0x20000008

080009c8 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80009c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ca:	4604      	mov	r4, r0
 80009cc:	460e      	mov	r6, r1
 80009ce:	4615      	mov	r5, r2
 80009d0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80009d2:	6821      	ldr	r1, [r4, #0]
 80009d4:	688a      	ldr	r2, [r1, #8]
 80009d6:	ea36 0302 	bics.w	r3, r6, r2
 80009da:	d001      	beq.n	80009e0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009dc:	2000      	movs	r0, #0
}
 80009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80009e0:	1c6b      	adds	r3, r5, #1
 80009e2:	d0f7      	beq.n	80009d4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80009e4:	f7ff fbfc 	bl	80001e0 <HAL_GetTick>
 80009e8:	1bc0      	subs	r0, r0, r7
 80009ea:	4285      	cmp	r5, r0
 80009ec:	d8f1      	bhi.n	80009d2 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80009ee:	6823      	ldr	r3, [r4, #0]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80009f6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80009f8:	6862      	ldr	r2, [r4, #4]
 80009fa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80009fe:	d10a      	bne.n	8000a16 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 8000a00:	68a2      	ldr	r2, [r4, #8]
 8000a02:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000a06:	d002      	beq.n	8000a0e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000a08:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000a0c:	d103      	bne.n	8000a16 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a14:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000a16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a18:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a1c:	d107      	bne.n	8000a2e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a2c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000a34:	2300      	movs	r3, #0
 8000a36:	2003      	movs	r0, #3
 8000a38:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a3e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8000a3e:	b538      	push	{r3, r4, r5, lr}
 8000a40:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a42:	6842      	ldr	r2, [r0, #4]
{
 8000a44:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a46:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000a4a:	d116      	bne.n	8000a7a <SPI_EndRxTransaction+0x3c>
 8000a4c:	6880      	ldr	r0, [r0, #8]
 8000a4e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000a52:	d002      	beq.n	8000a5a <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000a54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000a58:	d10f      	bne.n	8000a7a <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8000a5a:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8000a5c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8000a60:	6815      	ldr	r5, [r2, #0]
 8000a62:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8000a66:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8000a68:	d107      	bne.n	8000a7a <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000a6a:	460a      	mov	r2, r1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f7ff ffaa 	bl	80009c8 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8000a74:	b920      	cbnz	r0, 8000a80 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000a76:	2000      	movs	r0, #0
 8000a78:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a7a:	460a      	mov	r2, r1
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	e7f6      	b.n	8000a6e <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a80:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000a82:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a84:	f043 0320 	orr.w	r3, r3, #32
 8000a88:	6563      	str	r3, [r4, #84]	; 0x54
}
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}

08000a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000a8c:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	460a      	mov	r2, r1
 8000a92:	2180      	movs	r1, #128	; 0x80
{
 8000a94:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a96:	f7ff ff97 	bl	80009c8 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8000a9a:	b120      	cbz	r0, 8000aa6 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000a9c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000aa6:	bd10      	pop	{r4, pc}

08000aa8 <HAL_SPI_Init>:
{
 8000aa8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000aaa:	4604      	mov	r4, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d034      	beq.n	8000b1a <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ab4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ab8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000abc:	b91b      	cbnz	r3, 8000ac6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000abe:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000ac2:	f000 fd07 	bl	80014d4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ac6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000ac8:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000aca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ace:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ad0:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ad6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ad8:	6863      	ldr	r3, [r4, #4]
 8000ada:	69a1      	ldr	r1, [r4, #24]
 8000adc:	4303      	orrs	r3, r0
 8000ade:	68e0      	ldr	r0, [r4, #12]
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	6920      	ldr	r0, [r4, #16]
 8000ae4:	4303      	orrs	r3, r0
 8000ae6:	6960      	ldr	r0, [r4, #20]
 8000ae8:	4303      	orrs	r3, r0
 8000aea:	69e0      	ldr	r0, [r4, #28]
 8000aec:	4303      	orrs	r3, r0
 8000aee:	6a20      	ldr	r0, [r4, #32]
 8000af0:	4303      	orrs	r3, r0
 8000af2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000af4:	4303      	orrs	r3, r0
 8000af6:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000afa:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000afc:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000afe:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b02:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000b04:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000b06:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b08:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b0e:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000b10:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b12:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000b14:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000b18:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b1a:	2001      	movs	r0, #1
}
 8000b1c:	bd10      	pop	{r4, pc}

08000b1e <HAL_SPI_Transmit>:
{
 8000b1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000b22:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000b24:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000b28:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000b2a:	2b01      	cmp	r3, #1
{
 8000b2c:	460d      	mov	r5, r1
 8000b2e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000b30:	f000 809c 	beq.w	8000c6c <HAL_SPI_Transmit+0x14e>
 8000b34:	2301      	movs	r3, #1
 8000b36:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000b3a:	f7ff fb51 	bl	80001e0 <HAL_GetTick>
 8000b3e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000b40:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000b44:	b2c0      	uxtb	r0, r0
 8000b46:	2801      	cmp	r0, #1
 8000b48:	f040 808e 	bne.w	8000c68 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d05e      	beq.n	8000c0e <HAL_SPI_Transmit+0xf0>
 8000b50:	f1b8 0f00 	cmp.w	r8, #0
 8000b54:	d05b      	beq.n	8000c0e <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000b56:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b58:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000b5a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b5e:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b60:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000b62:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000b64:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000b68:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000b6a:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000b6c:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000b6e:	6420      	str	r0, [r4, #64]	; 0x40
 8000b70:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000b76:	bf08      	it	eq
 8000b78:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000b7a:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8000b7c:	bf08      	it	eq
 8000b7e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8000b82:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000b86:	bf08      	it	eq
 8000b88:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b8a:	6803      	ldr	r3, [r0, #0]
 8000b8c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000b8e:	bf5e      	ittt	pl
 8000b90:	6803      	ldrpl	r3, [r0, #0]
 8000b92:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000b96:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000b98:	68e3      	ldr	r3, [r4, #12]
 8000b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b9e:	6863      	ldr	r3, [r4, #4]
 8000ba0:	d13e      	bne.n	8000c20 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000ba2:	b113      	cbz	r3, 8000baa <HAL_SPI_Transmit+0x8c>
 8000ba4:	f1b8 0f01 	cmp.w	r8, #1
 8000ba8:	d107      	bne.n	8000bba <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000baa:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000bae:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000bb0:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000bb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000bba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b9a3      	cbnz	r3, 8000bea <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000bc0:	463a      	mov	r2, r7
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff ff61 	bl	8000a8c <SPI_EndRxTxTransaction>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d149      	bne.n	8000c62 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000bce:	68a3      	ldr	r3, [r4, #8]
 8000bd0:	b933      	cbnz	r3, 8000be0 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	9201      	str	r2, [sp, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000be0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000be2:	3000      	adds	r0, #0
 8000be4:	bf18      	it	ne
 8000be6:	2001      	movne	r0, #1
 8000be8:	e011      	b.n	8000c0e <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	6893      	ldr	r3, [r2, #8]
 8000bee:	0798      	lsls	r0, r3, #30
 8000bf0:	d505      	bpl.n	8000bfe <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000bf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bf4:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000bf8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8000bfc:	e7d9      	b.n	8000bb2 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000bfe:	f7ff faef 	bl	80001e0 <HAL_GetTick>
 8000c02:	1bc0      	subs	r0, r0, r7
 8000c04:	42b0      	cmp	r0, r6
 8000c06:	d3d8      	bcc.n	8000bba <HAL_SPI_Transmit+0x9c>
 8000c08:	1c71      	adds	r1, r6, #1
 8000c0a:	d0d6      	beq.n	8000bba <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8000c0c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c14:	2300      	movs	r3, #0
 8000c16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000c1a:	b002      	add	sp, #8
 8000c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000c20:	b113      	cbz	r3, 8000c28 <HAL_SPI_Transmit+0x10a>
 8000c22:	f1b8 0f01 	cmp.w	r8, #1
 8000c26:	d108      	bne.n	8000c3a <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000c28:	782b      	ldrb	r3, [r5, #0]
 8000c2a:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000c2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c2e:	3301      	adds	r3, #1
 8000c30:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000c32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000c3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0be      	beq.n	8000bc0 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	0792      	lsls	r2, r2, #30
 8000c48:	d503      	bpl.n	8000c52 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000c4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	731a      	strb	r2, [r3, #12]
 8000c50:	e7ec      	b.n	8000c2c <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000c52:	f7ff fac5 	bl	80001e0 <HAL_GetTick>
 8000c56:	1bc0      	subs	r0, r0, r7
 8000c58:	4286      	cmp	r6, r0
 8000c5a:	d8ee      	bhi.n	8000c3a <HAL_SPI_Transmit+0x11c>
 8000c5c:	1c73      	adds	r3, r6, #1
 8000c5e:	d0ec      	beq.n	8000c3a <HAL_SPI_Transmit+0x11c>
 8000c60:	e7d4      	b.n	8000c0c <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c62:	2320      	movs	r3, #32
 8000c64:	6563      	str	r3, [r4, #84]	; 0x54
 8000c66:	e7b2      	b.n	8000bce <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8000c68:	2002      	movs	r0, #2
 8000c6a:	e7d0      	b.n	8000c0e <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	e7d4      	b.n	8000c1a <HAL_SPI_Transmit+0xfc>

08000c70 <HAL_SPI_TransmitReceive>:
{
 8000c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c74:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000c76:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000c7a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000c7c:	2b01      	cmp	r3, #1
{
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4691      	mov	r9, r2
 8000c82:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000c84:	f000 80e2 	beq.w	8000e4c <HAL_SPI_TransmitReceive+0x1dc>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c8e:	f7ff faa7 	bl	80001e0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000c92:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000c96:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8000c98:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000c9a:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8000c9c:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000c9e:	d00a      	beq.n	8000cb6 <HAL_SPI_TransmitReceive+0x46>
 8000ca0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000ca4:	f040 80d0 	bne.w	8000e48 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000ca8:	68a0      	ldr	r0, [r4, #8]
 8000caa:	2800      	cmp	r0, #0
 8000cac:	f040 80cc 	bne.w	8000e48 <HAL_SPI_TransmitReceive+0x1d8>
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	f040 80c9 	bne.w	8000e48 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80c4 	beq.w	8000e44 <HAL_SPI_TransmitReceive+0x1d4>
 8000cbc:	f1b9 0f00 	cmp.w	r9, #0
 8000cc0:	f000 80c0 	beq.w	8000e44 <HAL_SPI_TransmitReceive+0x1d4>
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	f000 80bd 	beq.w	8000e44 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000cca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000cce:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000cd2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000cd4:	bf1c      	itt	ne
 8000cd6:	2305      	movne	r3, #5
 8000cd8:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000ce0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000ce2:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ce4:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000ce6:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000ce8:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cea:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000cec:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cee:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000cf0:	bf58      	it	pl
 8000cf2:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000cf4:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000cf6:	bf58      	it	pl
 8000cf8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000cfc:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000cfe:	bf58      	it	pl
 8000d00:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000d02:	68e2      	ldr	r2, [r4, #12]
 8000d04:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000d08:	d158      	bne.n	8000dbc <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d0a:	b109      	cbz	r1, 8000d10 <HAL_SPI_TransmitReceive+0xa0>
 8000d0c:	2e01      	cmp	r6, #1
 8000d0e:	d107      	bne.n	8000d20 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d10:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d14:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d16:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d18:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000d20:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b9ab      	cbnz	r3, 8000d54 <HAL_SPI_TransmitReceive+0xe4>
 8000d28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b993      	cbnz	r3, 8000d54 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000d2e:	4642      	mov	r2, r8
 8000d30:	4639      	mov	r1, r7
 8000d32:	4620      	mov	r0, r4
 8000d34:	f7ff feaa 	bl	8000a8c <SPI_EndRxTxTransaction>
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	f040 8081 	bne.w	8000e40 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d3e:	68a3      	ldr	r3, [r4, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d132      	bne.n	8000daa <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	9001      	str	r0, [sp, #4]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	9201      	str	r2, [sp, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	9b01      	ldr	r3, [sp, #4]
 8000d52:	e02a      	b.n	8000daa <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d54:	6822      	ldr	r2, [r4, #0]
 8000d56:	6893      	ldr	r3, [r2, #8]
 8000d58:	0799      	lsls	r1, r3, #30
 8000d5a:	d50d      	bpl.n	8000d78 <HAL_SPI_TransmitReceive+0x108>
 8000d5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	b153      	cbz	r3, 8000d78 <HAL_SPI_TransmitReceive+0x108>
 8000d62:	b14d      	cbz	r5, 8000d78 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8000d64:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d68:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000d6c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d6e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000d70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d72:	3b01      	subs	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000d78:	6893      	ldr	r3, [r2, #8]
 8000d7a:	07db      	lsls	r3, r3, #31
 8000d7c:	d50c      	bpl.n	8000d98 <HAL_SPI_TransmitReceive+0x128>
 8000d7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b14b      	cbz	r3, 8000d98 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8000d84:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000d86:	68d2      	ldr	r2, [r2, #12]
 8000d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d8a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000d8e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000d90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000d98:	f7ff fa22 	bl	80001e0 <HAL_GetTick>
 8000d9c:	eba0 0008 	sub.w	r0, r0, r8
 8000da0:	4287      	cmp	r7, r0
 8000da2:	d8be      	bhi.n	8000d22 <HAL_SPI_TransmitReceive+0xb2>
 8000da4:	1c7e      	adds	r6, r7, #1
 8000da6:	d0bc      	beq.n	8000d22 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8000da8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000db0:	2300      	movs	r3, #0
 8000db2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000db6:	b003      	add	sp, #12
 8000db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000dbc:	b109      	cbz	r1, 8000dc2 <HAL_SPI_TransmitReceive+0x152>
 8000dbe:	2e01      	cmp	r6, #1
 8000dc0:	d108      	bne.n	8000dd4 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000dc2:	782a      	ldrb	r2, [r5, #0]
 8000dc4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000dc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dc8:	3301      	adds	r3, #1
 8000dca:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000dcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000dd4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000dd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b91b      	cbnz	r3, 8000de4 <HAL_SPI_TransmitReceive+0x174>
 8000ddc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0a4      	beq.n	8000d2e <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000de4:	6822      	ldr	r2, [r4, #0]
 8000de6:	6893      	ldr	r3, [r2, #8]
 8000de8:	0798      	lsls	r0, r3, #30
 8000dea:	d50e      	bpl.n	8000e0a <HAL_SPI_TransmitReceive+0x19a>
 8000dec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b15b      	cbz	r3, 8000e0a <HAL_SPI_TransmitReceive+0x19a>
 8000df2:	b155      	cbz	r5, 8000e0a <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8000df4:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8000dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dfe:	3301      	adds	r3, #1
 8000e00:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000e0a:	6822      	ldr	r2, [r4, #0]
 8000e0c:	6893      	ldr	r3, [r2, #8]
 8000e0e:	07d9      	lsls	r1, r3, #31
 8000e10:	d50d      	bpl.n	8000e2e <HAL_SPI_TransmitReceive+0x1be>
 8000e12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b153      	cbz	r3, 8000e2e <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8000e18:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000e1a:	68d2      	ldr	r2, [r2, #12]
 8000e1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e22:	3301      	adds	r3, #1
 8000e24:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000e26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000e2e:	f7ff f9d7 	bl	80001e0 <HAL_GetTick>
 8000e32:	eba0 0008 	sub.w	r0, r0, r8
 8000e36:	4287      	cmp	r7, r0
 8000e38:	d8cd      	bhi.n	8000dd6 <HAL_SPI_TransmitReceive+0x166>
 8000e3a:	1c7b      	adds	r3, r7, #1
 8000e3c:	d0cb      	beq.n	8000dd6 <HAL_SPI_TransmitReceive+0x166>
 8000e3e:	e7b3      	b.n	8000da8 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e40:	2320      	movs	r3, #32
 8000e42:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
 8000e46:	e7b0      	b.n	8000daa <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8000e48:	2002      	movs	r0, #2
 8000e4a:	e7ae      	b.n	8000daa <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	e7b2      	b.n	8000db6 <HAL_SPI_TransmitReceive+0x146>

08000e50 <HAL_SPI_Receive>:
{
 8000e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000e54:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e56:	6843      	ldr	r3, [r0, #4]
{
 8000e58:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8000e5e:	4688      	mov	r8, r1
 8000e60:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e62:	d10c      	bne.n	8000e7e <HAL_SPI_Receive+0x2e>
 8000e64:	6883      	ldr	r3, [r0, #8]
 8000e66:	b953      	cbnz	r3, 8000e7e <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8000e6e:	4613      	mov	r3, r2
 8000e70:	9500      	str	r5, [sp, #0]
 8000e72:	460a      	mov	r2, r1
 8000e74:	f7ff fefc 	bl	8000c70 <HAL_SPI_TransmitReceive>
}
 8000e78:	b002      	add	sp, #8
 8000e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8000e7e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d079      	beq.n	8000f7a <HAL_SPI_Receive+0x12a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e8c:	f7ff f9a8 	bl	80001e0 <HAL_GetTick>
 8000e90:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e92:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e96:	b2c0      	uxtb	r0, r0
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	d16c      	bne.n	8000f76 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 8000e9c:	f1b8 0f00 	cmp.w	r8, #0
 8000ea0:	d057      	beq.n	8000f52 <HAL_SPI_Receive+0x102>
 8000ea2:	2f00      	cmp	r7, #0
 8000ea4:	d055      	beq.n	8000f52 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8000eb0:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8000eb2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8000eb4:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8000eb6:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8000eb8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000eba:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ebc:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 8000ebe:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ec4:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8000ec6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8000eca:	bf02      	ittt	eq
 8000ecc:	681a      	ldreq	r2, [r3, #0]
 8000ece:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8000ed2:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ed8:	bf5e      	ittt	pl
 8000eda:	681a      	ldrpl	r2, [r3, #0]
 8000edc:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000ee0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000ee2:	68e3      	ldr	r3, [r4, #12]
 8000ee4:	b1f3      	cbz	r3, 8000f24 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8000ee6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b1fb      	cbz	r3, 8000f2c <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	07d2      	lsls	r2, r2, #31
 8000ef2:	d535      	bpl.n	8000f60 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ef8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000efc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000efe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000f06:	e7ee      	b.n	8000ee6 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	07d0      	lsls	r0, r2, #31
 8000f0e:	d518      	bpl.n	8000f42 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000f10:	7b1b      	ldrb	r3, [r3, #12]
 8000f12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f14:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8000f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f18:	3301      	adds	r3, #1
 8000f1a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000f1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8000f24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1ed      	bne.n	8000f08 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f2c:	4632      	mov	r2, r6
 8000f2e:	4629      	mov	r1, r5
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff fd84 	bl	8000a3e <SPI_EndRxTransaction>
 8000f36:	b9d8      	cbnz	r0, 8000f70 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f38:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000f3a:	3000      	adds	r0, #0
 8000f3c:	bf18      	it	ne
 8000f3e:	2001      	movne	r0, #1
 8000f40:	e007      	b.n	8000f52 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f42:	f7ff f94d 	bl	80001e0 <HAL_GetTick>
 8000f46:	1b80      	subs	r0, r0, r6
 8000f48:	4285      	cmp	r5, r0
 8000f4a:	d8eb      	bhi.n	8000f24 <HAL_SPI_Receive+0xd4>
 8000f4c:	1c69      	adds	r1, r5, #1
 8000f4e:	d0e9      	beq.n	8000f24 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8000f50:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8000f5e:	e78b      	b.n	8000e78 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f60:	f7ff f93e 	bl	80001e0 <HAL_GetTick>
 8000f64:	1b80      	subs	r0, r0, r6
 8000f66:	4285      	cmp	r5, r0
 8000f68:	d8bd      	bhi.n	8000ee6 <HAL_SPI_Receive+0x96>
 8000f6a:	1c6b      	adds	r3, r5, #1
 8000f6c:	d0bb      	beq.n	8000ee6 <HAL_SPI_Receive+0x96>
 8000f6e:	e7ef      	b.n	8000f50 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f70:	2320      	movs	r3, #32
 8000f72:	6563      	str	r3, [r4, #84]	; 0x54
 8000f74:	e7e0      	b.n	8000f38 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8000f76:	2002      	movs	r0, #2
 8000f78:	e7eb      	b.n	8000f52 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	e77c      	b.n	8000e78 <HAL_SPI_Receive+0x28>
	...

08000f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f84:	6803      	ldr	r3, [r0, #0]
 8000f86:	68c1      	ldr	r1, [r0, #12]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	2419      	movs	r4, #25
 8000f8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f90:	430a      	orrs	r2, r1
 8000f92:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f94:	6882      	ldr	r2, [r0, #8]
 8000f96:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000f98:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f9a:	4302      	orrs	r2, r0
 8000f9c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000f9e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000fa2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000fa6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	69a9      	ldr	r1, [r5, #24]
 8000fb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <UART_SetConfig+0x70>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d114      	bne.n	8000fe8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000fbe:	f7ff fcf3 	bl	80009a8 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fc2:	4360      	muls	r0, r4
 8000fc4:	686c      	ldr	r4, [r5, #4]
 8000fc6:	2264      	movs	r2, #100	; 0x64
 8000fc8:	00a4      	lsls	r4, r4, #2
 8000fca:	fbb0 f0f4 	udiv	r0, r0, r4
 8000fce:	fbb0 f4f2 	udiv	r4, r0, r2
 8000fd2:	fb02 0314 	mls	r3, r2, r4, r0
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	3332      	adds	r3, #50	; 0x32
 8000fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fde:	6829      	ldr	r1, [r5, #0]
 8000fe0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000fe4:	608b      	str	r3, [r1, #8]
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000fe8:	f7ff fcce 	bl	8000988 <HAL_RCC_GetPCLK1Freq>
 8000fec:	e7e9      	b.n	8000fc2 <UART_SetConfig+0x42>
 8000fee:	bf00      	nop
 8000ff0:	40013800 	.word	0x40013800

08000ff4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	460e      	mov	r6, r1
 8000ffa:	4617      	mov	r7, r2
 8000ffc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ffe:	6821      	ldr	r1, [r4, #0]
 8001000:	680b      	ldr	r3, [r1, #0]
 8001002:	ea36 0303 	bics.w	r3, r6, r3
 8001006:	d101      	bne.n	800100c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
}
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800100c:	1c6b      	adds	r3, r5, #1
 800100e:	d0f7      	beq.n	8001000 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001010:	b995      	cbnz	r5, 8001038 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001012:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001014:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800101c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001026:	2320      	movs	r3, #32
 8001028:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800102c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001030:	2300      	movs	r3, #0
 8001032:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001038:	f7ff f8d2 	bl	80001e0 <HAL_GetTick>
 800103c:	1bc0      	subs	r0, r0, r7
 800103e:	4285      	cmp	r5, r0
 8001040:	d2dd      	bcs.n	8000ffe <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001042:	e7e6      	b.n	8001012 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001044 <HAL_UART_Init>:
{
 8001044:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001046:	4604      	mov	r4, r0
 8001048:	b340      	cbz	r0, 800109c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800104a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800104e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001052:	b91b      	cbnz	r3, 800105c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001054:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001058:	f000 fa78 	bl	800154c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800105c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800105e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001060:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001064:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001066:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800106c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800106e:	f7ff ff87 	bl	8000f80 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001072:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001074:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800107c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001084:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800108c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800108e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001090:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001092:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001096:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800109a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800109c:	2001      	movs	r0, #1
}
 800109e:	bd10      	pop	{r4, pc}

080010a0 <HAL_UART_Transmit>:
{
 80010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80010a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80010aa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80010ac:	2b20      	cmp	r3, #32
{
 80010ae:	460d      	mov	r5, r1
 80010b0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80010b2:	d14e      	bne.n	8001152 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80010b4:	2900      	cmp	r1, #0
 80010b6:	d049      	beq.n	800114c <HAL_UART_Transmit+0xac>
 80010b8:	2a00      	cmp	r2, #0
 80010ba:	d047      	beq.n	800114c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80010bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d046      	beq.n	8001152 <HAL_UART_Transmit+0xb2>
 80010c4:	2301      	movs	r3, #1
 80010c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010ce:	2321      	movs	r3, #33	; 0x21
 80010d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80010d4:	f7ff f884 	bl	80001e0 <HAL_GetTick>
 80010d8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80010da:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80010de:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b96b      	cbnz	r3, 8001104 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4632      	mov	r2, r6
 80010ec:	2140      	movs	r1, #64	; 0x40
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff ff80 	bl	8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010f4:	b9a8      	cbnz	r0, 8001122 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80010f6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80010f8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80010fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001104:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001106:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001108:	3b01      	subs	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800110e:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001110:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001116:	4620      	mov	r0, r4
 8001118:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800111a:	d10e      	bne.n	800113a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800111c:	f7ff ff6a 	bl	8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001120:	b110      	cbz	r0, 8001128 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001122:	2003      	movs	r0, #3
 8001124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001128:	882b      	ldrh	r3, [r5, #0]
 800112a:	6822      	ldr	r2, [r4, #0]
 800112c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001130:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	b943      	cbnz	r3, 8001148 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001136:	3502      	adds	r5, #2
 8001138:	e7d3      	b.n	80010e2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800113a:	f7ff ff5b 	bl	8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800113e:	2800      	cmp	r0, #0
 8001140:	d1ef      	bne.n	8001122 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	782a      	ldrb	r2, [r5, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	3501      	adds	r5, #1
 800114a:	e7ca      	b.n	80010e2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800114c:	2001      	movs	r0, #1
 800114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001152:	2002      	movs	r0, #2
}
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b510      	push	{r4, lr}
 800115a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115c:	2228      	movs	r2, #40	; 0x28
 800115e:	2100      	movs	r1, #0
 8001160:	a806      	add	r0, sp, #24
 8001162:	f001 f905 	bl	8002370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001166:	2100      	movs	r1, #0
 8001168:	2214      	movs	r2, #20
 800116a:	a801      	add	r0, sp, #4
 800116c:	f001 f900 	bl	8002370 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001174:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001178:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800117c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001182:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001186:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001188:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118a:	f7ff f985 	bl	8000498 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001196:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001198:	4621      	mov	r1, r4
 800119a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a4:	f7ff fb52 	bl	800084c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80011a8:	b010      	add	sp, #64	; 0x40
 80011aa:	bd10      	pop	{r4, pc}

080011ac <main>:
{
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 80011b2:	f7fe fff7 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80011b6:	f7ff ffcf 	bl	8001158 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	2210      	movs	r2, #16
 80011bc:	2100      	movs	r1, #0
 80011be:	a806      	add	r0, sp, #24
 80011c0:	f001 f8d6 	bl	8002370 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c4:	4ba3      	ldr	r3, [pc, #652]	; (8001454 <main+0x2a8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80011c6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80011ca:	48a3      	ldr	r0, [pc, #652]	; (8001458 <main+0x2ac>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	f042 0220 	orr.w	r2, r2, #32
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	f002 0220 	and.w	r2, r2, #32
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80011e0:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	f042 0204 	orr.w	r2, r2, #4
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	699a      	ldr	r2, [r3, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ea:	f04f 080c 	mov.w	r8, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	f002 0204 	and.w	r2, r2, #4
 80011f2:	9201      	str	r2, [sp, #4]
 80011f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 80011f8:	4d98      	ldr	r5, [pc, #608]	; (800145c <main+0x2b0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	619a      	str	r2, [r3, #24]
 8001200:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800120c:	f7ff f93e 	bl	800048c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001212:	a906      	add	r1, sp, #24
 8001214:	4890      	ldr	r0, [pc, #576]	; (8001458 <main+0x2ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001218:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800121e:	f7ff f853 	bl	80002c8 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8001222:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001226:	4a8e      	ldr	r2, [pc, #568]	; (8001460 <main+0x2b4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001228:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 800122a:	e885 000c 	stmia.w	r5, {r2, r3}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001230:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001232:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	f8c5 8014 	str.w	r8, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001238:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800123a:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123c:	f7ff ff02 	bl	8001044 <HAL_UART_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001240:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Instance = SPI2;
 8001244:	4887      	ldr	r0, [pc, #540]	; (8001464 <main+0x2b8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001246:	4988      	ldr	r1, [pc, #544]	; (8001468 <main+0x2bc>)
  hspi2.Init.CRCPolynomial = 10;
 8001248:	260a      	movs	r6, #10
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124a:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800124e:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	6084      	str	r4, [r0, #8]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001254:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001256:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125a:	6144      	str	r4, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800125c:	61c4      	str	r4, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125e:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001260:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001262:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001264:	62c6      	str	r6, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001266:	f7ff fc1f 	bl	8000aa8 <HAL_SPI_Init>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Start W25QXX\n", 13, 1000);
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	220d      	movs	r2, #13
 8001270:	497e      	ldr	r1, [pc, #504]	; (800146c <main+0x2c0>)
 8001272:	4628      	mov	r0, r5
 8001274:	f7ff ff14 	bl	80010a0 <HAL_UART_Transmit>
  W25qxx_Init();
 8001278:	f000 fa5e 	bl	8001738 <W25qxx_Init>
  W25qxx_EraseBlock(0); // 65536 байт
 800127c:	4620      	mov	r0, r4
 800127e:	f000 fc37 	bl	8001af0 <W25qxx_EraseBlock>
  W25qxx_WriteByte(b0, 25);
 8001282:	2119      	movs	r1, #25
 8001284:	2073      	movs	r0, #115	; 0x73
 8001286:	f000 fde7 	bl	8001e58 <W25qxx_WriteByte>
  W25qxx_WriteByte(b1, 26);
 800128a:	211a      	movs	r1, #26
 800128c:	2074      	movs	r0, #116	; 0x74
 800128e:	f000 fde3 	bl	8001e58 <W25qxx_WriteByte>
  W25qxx_WriteByte(b2, 27);
 8001292:	211b      	movs	r1, #27
 8001294:	2044      	movs	r0, #68	; 0x44
 8001296:	f000 fddf 	bl	8001e58 <W25qxx_WriteByte>
  uint8_t buf[64] = {0,};
 800129a:	2240      	movs	r2, #64	; 0x40
 800129c:	4621      	mov	r1, r4
 800129e:	a806      	add	r0, sp, #24
 80012a0:	f001 f866 	bl	8002370 <memset>
  W25qxx_ReadByte(&buf[0], 25);
 80012a4:	2119      	movs	r1, #25
 80012a6:	a806      	add	r0, sp, #24
 80012a8:	f000 fed2 	bl	8002050 <W25qxx_ReadByte>
  W25qxx_ReadByte(&buf[1], 26);
 80012ac:	211a      	movs	r1, #26
 80012ae:	f10d 0019 	add.w	r0, sp, #25
 80012b2:	f000 fecd 	bl	8002050 <W25qxx_ReadByte>
  W25qxx_ReadByte(&buf[2], 27);
 80012b6:	211b      	movs	r1, #27
 80012b8:	f10d 001a 	add.w	r0, sp, #26
 80012bc:	f000 fec8 	bl	8002050 <W25qxx_ReadByte>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 80012c0:	a806      	add	r0, sp, #24
 80012c2:	f7fe ff43 	bl	800014c <strlen>
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	b282      	uxth	r2, r0
 80012ca:	a906      	add	r1, sp, #24
 80012cc:	4628      	mov	r0, r5
 80012ce:	f7ff fee7 	bl	80010a0 <HAL_UART_Transmit>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	463a      	mov	r2, r7
 80012d6:	4966      	ldr	r1, [pc, #408]	; (8001470 <main+0x2c4>)
 80012d8:	4628      	mov	r0, r5
 80012da:	f7ff fee1 	bl	80010a0 <HAL_UART_Transmit>
  uint8_t w_buf[] = "istarik.ru";
 80012de:	4a65      	ldr	r2, [pc, #404]	; (8001474 <main+0x2c8>)
 80012e0:	eb0d 0308 	add.w	r3, sp, r8
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	6851      	ldr	r1, [r2, #4]
 80012e8:	c303      	stmia	r3!, {r0, r1}
 80012ea:	8911      	ldrh	r1, [r2, #8]
 80012ec:	7a92      	ldrb	r2, [r2, #10]
 80012ee:	8019      	strh	r1, [r3, #0]
 80012f0:	709a      	strb	r2, [r3, #2]
  W25qxx_WritePage(w_buf, 0, 28, 10);
 80012f2:	4621      	mov	r1, r4
 80012f4:	4633      	mov	r3, r6
 80012f6:	221c      	movs	r2, #28
 80012f8:	eb0d 0008 	add.w	r0, sp, r8
 80012fc:	f000 fdea 	bl	8001ed4 <W25qxx_WritePage>
  memset(buf, 0, 64);
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	4621      	mov	r1, r4
 8001304:	a806      	add	r0, sp, #24
 8001306:	f001 f833 	bl	8002370 <memset>
  W25qxx_ReadPage(buf, 0, 28, 10);
 800130a:	4633      	mov	r3, r6
 800130c:	221c      	movs	r2, #28
 800130e:	4621      	mov	r1, r4
 8001310:	a806      	add	r0, sp, #24
 8001312:	f000 ff21 	bl	8002158 <W25qxx_ReadPage>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 8001316:	a806      	add	r0, sp, #24
 8001318:	f7fe ff18 	bl	800014c <strlen>
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	b282      	uxth	r2, r0
 8001320:	a906      	add	r1, sp, #24
 8001322:	4628      	mov	r0, r5
 8001324:	f7ff febc 	bl	80010a0 <HAL_UART_Transmit>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 8001328:	2364      	movs	r3, #100	; 0x64
 800132a:	463a      	mov	r2, r7
 800132c:	4950      	ldr	r1, [pc, #320]	; (8001470 <main+0x2c4>)
 800132e:	4628      	mov	r0, r5
 8001330:	f7ff feb6 	bl	80010a0 <HAL_UART_Transmit>
  W25qxx_WriteSector(w_buf, 0, 1350, 10);
 8001334:	4633      	mov	r3, r6
 8001336:	f240 5246 	movw	r2, #1350	; 0x546
 800133a:	4621      	mov	r1, r4
 800133c:	eb0d 0008 	add.w	r0, sp, r8
 8001340:	f000 fe22 	bl	8001f88 <W25qxx_WriteSector>
  memset(buf, 0, 64);
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	4621      	mov	r1, r4
 8001348:	a806      	add	r0, sp, #24
 800134a:	f001 f811 	bl	8002370 <memset>
  W25qxx_ReadSector(buf, 0, 1350, 10);
 800134e:	4633      	mov	r3, r6
 8001350:	f240 5246 	movw	r2, #1350	; 0x546
 8001354:	4621      	mov	r1, r4
 8001356:	a806      	add	r0, sp, #24
 8001358:	f000 ff56 	bl	8002208 <W25qxx_ReadSector>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 800135c:	a806      	add	r0, sp, #24
 800135e:	f7fe fef5 	bl	800014c <strlen>
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	b282      	uxth	r2, r0
 8001366:	a906      	add	r1, sp, #24
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff fe99 	bl	80010a0 <HAL_UART_Transmit>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 800136e:	2364      	movs	r3, #100	; 0x64
 8001370:	463a      	mov	r2, r7
 8001372:	493f      	ldr	r1, [pc, #252]	; (8001470 <main+0x2c4>)
 8001374:	4628      	mov	r0, r5
 8001376:	f7ff fe93 	bl	80010a0 <HAL_UART_Transmit>
  W25qxx_WriteBlock(w_buf, 0, 9350, 10);
 800137a:	4633      	mov	r3, r6
 800137c:	f242 4286 	movw	r2, #9350	; 0x2486
 8001380:	4621      	mov	r1, r4
 8001382:	eb0d 0008 	add.w	r0, sp, r8
 8001386:	f000 fe31 	bl	8001fec <W25qxx_WriteBlock>
  memset(buf, 0, 64);
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	4621      	mov	r1, r4
 800138e:	a806      	add	r0, sp, #24
 8001390:	f000 ffee 	bl	8002370 <memset>
  W25qxx_ReadBlock(buf, 0, 9350, 10);
 8001394:	4633      	mov	r3, r6
 8001396:	f242 4286 	movw	r2, #9350	; 0x2486
 800139a:	4621      	mov	r1, r4
 800139c:	a806      	add	r0, sp, #24
 800139e:	f000 ff65 	bl	800226c <W25qxx_ReadBlock>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 80013a2:	a806      	add	r0, sp, #24
 80013a4:	f7fe fed2 	bl	800014c <strlen>
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	b282      	uxth	r2, r0
 80013ac:	a906      	add	r1, sp, #24
 80013ae:	4628      	mov	r0, r5
 80013b0:	f7ff fe76 	bl	80010a0 <HAL_UART_Transmit>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 80013b4:	2364      	movs	r3, #100	; 0x64
 80013b6:	463a      	mov	r2, r7
 80013b8:	492d      	ldr	r1, [pc, #180]	; (8001470 <main+0x2c4>)
 80013ba:	4628      	mov	r0, r5
 80013bc:	f7ff fe70 	bl	80010a0 <HAL_UART_Transmit>
  memset(buf, 0, 64);
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	4621      	mov	r1, r4
 80013c4:	a806      	add	r0, sp, #24
 80013c6:	f000 ffd3 	bl	8002370 <memset>
  W25qxx_ReadBytes(buf, 9350, 10);
 80013ca:	4632      	mov	r2, r6
 80013cc:	f242 4186 	movw	r1, #9350	; 0x2486
 80013d0:	a806      	add	r0, sp, #24
 80013d2:	f000 fe79 	bl	80020c8 <W25qxx_ReadBytes>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen((char*)buf), 100);
 80013d6:	a806      	add	r0, sp, #24
 80013d8:	f7fe feb8 	bl	800014c <strlen>
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	b282      	uxth	r2, r0
 80013e0:	a906      	add	r1, sp, #24
 80013e2:	4628      	mov	r0, r5
 80013e4:	f7ff fe5c 	bl	80010a0 <HAL_UART_Transmit>
  HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"\r\n", 2, 100);
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	463a      	mov	r2, r7
 80013ec:	4920      	ldr	r1, [pc, #128]	; (8001470 <main+0x2c4>)
 80013ee:	4628      	mov	r0, r5
 80013f0:	f7ff fe56 	bl	80010a0 <HAL_UART_Transmit>
  uint8_t clear = W25qxx_IsEmptyPage(0, 40);
 80013f4:	2128      	movs	r1, #40	; 0x28
 80013f6:	4620      	mov	r0, r4
 80013f8:	f000 fbd0 	bl	8001b9c <W25qxx_IsEmptyPage>
  if(clear) HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Clear P\n", 8, 100);
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	b1e8      	cbz	r0, 800143c <main+0x290>
 8001400:	2208      	movs	r2, #8
 8001402:	491d      	ldr	r1, [pc, #116]	; (8001478 <main+0x2cc>)
  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear P\n", 12, 100);
 8001404:	4628      	mov	r0, r5
 8001406:	f7ff fe4b 	bl	80010a0 <HAL_UART_Transmit>
  clear = W25qxx_IsEmptySector(0, 1360);
 800140a:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fc24 	bl	8001c5c <W25qxx_IsEmptySector>
  if(clear) HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Clear S\n", 8, 100);
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	b1a0      	cbz	r0, 8001442 <main+0x296>
 8001418:	2208      	movs	r2, #8
 800141a:	4918      	ldr	r1, [pc, #96]	; (800147c <main+0x2d0>)
  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear S\n", 12, 100);
 800141c:	480f      	ldr	r0, [pc, #60]	; (800145c <main+0x2b0>)
 800141e:	f7ff fe3f 	bl	80010a0 <HAL_UART_Transmit>
  clear = W25qxx_IsEmptyBlock(0, 9360);
 8001422:	f242 4190 	movw	r1, #9360	; 0x2490
 8001426:	2000      	movs	r0, #0
 8001428:	f000 fc96 	bl	8001d58 <W25qxx_IsEmptyBlock>
  if(clear) HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Clear B\n", 8, 100);
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	b158      	cbz	r0, 8001448 <main+0x29c>
 8001430:	2208      	movs	r2, #8
 8001432:	4913      	ldr	r1, [pc, #76]	; (8001480 <main+0x2d4>)
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <main+0x2b0>)
 8001436:	f7ff fe33 	bl	80010a0 <HAL_UART_Transmit>
 800143a:	e7fe      	b.n	800143a <main+0x28e>
  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear P\n", 12, 100);
 800143c:	4642      	mov	r2, r8
 800143e:	4911      	ldr	r1, [pc, #68]	; (8001484 <main+0x2d8>)
 8001440:	e7e0      	b.n	8001404 <main+0x258>
  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear S\n", 12, 100);
 8001442:	220c      	movs	r2, #12
 8001444:	4910      	ldr	r1, [pc, #64]	; (8001488 <main+0x2dc>)
 8001446:	e7e9      	b.n	800141c <main+0x270>
  else HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Not clear B\n", 12, 100);
 8001448:	220c      	movs	r2, #12
 800144a:	4910      	ldr	r1, [pc, #64]	; (800148c <main+0x2e0>)
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <main+0x2b0>)
 800144e:	f7ff fe27 	bl	80010a0 <HAL_UART_Transmit>
 8001452:	e7f2      	b.n	800143a <main+0x28e>
 8001454:	40021000 	.word	0x40021000
 8001458:	40010800 	.word	0x40010800
 800145c:	20000134 	.word	0x20000134
 8001460:	40013800 	.word	0x40013800
 8001464:	200000dc 	.word	0x200000dc
 8001468:	40003800 	.word	0x40003800
 800146c:	08002c20 	.word	0x08002c20
 8001470:	08002c2e 	.word	0x08002c2e
 8001474:	08002c73 	.word	0x08002c73
 8001478:	08002c31 	.word	0x08002c31
 800147c:	08002c47 	.word	0x08002c47
 8001480:	08002c5d 	.word	0x08002c5d
 8001484:	08002c3a 	.word	0x08002c3a
 8001488:	08002c50 	.word	0x08002c50
 800148c:	08002c66 	.word	0x08002c66

08001490 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_MspInit+0x3c>)
{
 8001492:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	619a      	str	r2, [r3, #24]
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	f002 0201 	and.w	r2, r2, #1
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	69da      	ldr	r2, [r3, #28]
 80014a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ac:	61da      	str	r2, [r3, #28]
 80014ae:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ba:	6853      	ldr	r3, [r2, #4]
 80014bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	b002      	add	sp, #8
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b510      	push	{r4, lr}
 80014d6:	4604      	mov	r4, r0
 80014d8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	2210      	movs	r2, #16
 80014dc:	2100      	movs	r1, #0
 80014de:	a802      	add	r0, sp, #8
 80014e0:	f000 ff46 	bl	8002370 <memset>
  if(hspi->Instance==SPI2)
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_SPI_MspInit+0x70>)
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d128      	bne.n	800153e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ec:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80014f0:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f8:	61da      	str	r2, [r3, #28]
 80014fa:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	4812      	ldr	r0, [pc, #72]	; (8001548 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	f042 0208 	orr.w	r2, r2, #8
 800150c:	619a      	str	r2, [r3, #24]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001518:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800151c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f7fe fecf 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800152a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800152e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	a902      	add	r1, sp, #8
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f7fe fec5 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800153e:	b006      	add	sp, #24
 8001540:	bd10      	pop	{r4, pc}
 8001542:	bf00      	nop
 8001544:	40003800 	.word	0x40003800
 8001548:	40010c00 	.word	0x40010c00

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b510      	push	{r4, lr}
 800154e:	4604      	mov	r4, r0
 8001550:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	2210      	movs	r2, #16
 8001554:	2100      	movs	r1, #0
 8001556:	a802      	add	r0, sp, #8
 8001558:	f000 ff0a 	bl	8002370 <memset>
  if(huart->Instance==USART1)
 800155c:	6822      	ldr	r2, [r4, #0]
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_UART_MspInit+0x70>)
 8001560:	429a      	cmp	r2, r3
 8001562:	d128      	bne.n	80015b6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001564:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001568:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800156c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001576:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	f042 0204 	orr.w	r2, r2, #4
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001594:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f7fe fe93 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	a902      	add	r1, sp, #8
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f7fe fe89 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015b6:	b006      	add	sp, #24
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40010800 	.word	0x40010800

080015c4 <NMI_Handler>:
 80015c4:	4770      	bx	lr

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler>

080015ce <SVC_Handler>:
 80015ce:	4770      	bx	lr

080015d0 <DebugMon_Handler>:
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f7fe bdf8 	b.w	80001c8 <HAL_IncTick>

080015d8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80015d8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <_sbrk+0x2c>)
{
 80015dc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	b909      	cbnz	r1, 80015e6 <_sbrk+0xe>
		heap_end = &end;
 80015e2:	4909      	ldr	r1, [pc, #36]	; (8001608 <_sbrk+0x30>)
 80015e4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80015e6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80015e8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80015ea:	4402      	add	r2, r0
 80015ec:	428a      	cmp	r2, r1
 80015ee:	d906      	bls.n	80015fe <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80015f0:	f000 fe94 	bl	800231c <__errno>
 80015f4:	230c      	movs	r3, #12
 80015f6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015fc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80015fe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001600:	bd08      	pop	{r3, pc}
 8001602:	bf00      	nop
 8001604:	2000008c 	.word	0x2000008c
 8001608:	200001a0 	.word	0x200001a0

0800160c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <SystemInit+0x40>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <SystemInit+0x44>)
 800161a:	400a      	ands	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001628:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001630:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001638:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800163a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800163e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <SystemInit+0x48>)
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	f8ff0000 	.word	0xf8ff0000
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8001658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 800165a:	2364      	movs	r3, #100	; 0x64
{
 800165c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	f10d 0217 	add.w	r2, sp, #23
 8001666:	2301      	movs	r3, #1
 8001668:	f10d 010f 	add.w	r1, sp, #15
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <W25qxx_Spi+0x24>)
 800166e:	f7ff faff 	bl	8000c70 <HAL_SPI_TransmitReceive>

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
}
 8001672:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001676:	b007      	add	sp, #28
 8001678:	f85d fb04 	ldr.w	pc, [sp], #4
 800167c:	200000dc 	.word	0x200000dc

08001680 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;

	W25QFLASH_CS_SELECT;
 8001682:	4d0f      	ldr	r5, [pc, #60]	; (80016c0 <W25qxx_ReadID+0x40>)
 8001684:	2200      	movs	r2, #0
 8001686:	2102      	movs	r1, #2
 8001688:	4628      	mov	r0, r5
 800168a:	f7fe feff 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 800168e:	209f      	movs	r0, #159	; 0x9f
 8001690:	f7ff ffe2 	bl	8001658 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001694:	20a5      	movs	r0, #165	; 0xa5
 8001696:	f7ff ffdf 	bl	8001658 <W25qxx_Spi>
 800169a:	4607      	mov	r7, r0
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800169c:	20a5      	movs	r0, #165	; 0xa5
 800169e:	f7ff ffdb 	bl	8001658 <W25qxx_Spi>
 80016a2:	4604      	mov	r4, r0
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80016a4:	20a5      	movs	r0, #165	; 0xa5
 80016a6:	f7ff ffd7 	bl	8001658 <W25qxx_Spi>
 80016aa:	4606      	mov	r6, r0

	W25QFLASH_CS_UNSELECT;
 80016ac:	2201      	movs	r2, #1
 80016ae:	4628      	mov	r0, r5
 80016b0:	2102      	movs	r1, #2
 80016b2:	f7fe feeb 	bl	800048c <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80016b6:	0220      	lsls	r0, r4, #8
 80016b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16

	return Temp;
}
 80016bc:	4330      	orrs	r0, r6
 80016be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016c0:	40010800 	.word	0x40010800

080016c4 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80016c4:	b510      	push	{r4, lr}
	W25QFLASH_CS_SELECT;
 80016c6:	4c09      	ldr	r4, [pc, #36]	; (80016ec <W25qxx_WriteEnable+0x28>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	2102      	movs	r1, #2
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7fe fedd 	bl	800048c <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 80016d2:	2006      	movs	r0, #6
 80016d4:	f7ff ffc0 	bl	8001658 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 80016d8:	4620      	mov	r0, r4
 80016da:	2201      	movs	r2, #1
 80016dc:	2102      	movs	r1, #2
 80016de:	f7fe fed5 	bl	800048c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
}
 80016e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	W25qxx_Delay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7fe bd80 	b.w	80001ec <HAL_Delay>
 80016ec:	40010800 	.word	0x40010800

080016f0 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80016f0:	b510      	push	{r4, lr}
	W25qxx_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7fe fd7a 	bl	80001ec <HAL_Delay>
	W25QFLASH_CS_SELECT;
 80016f8:	2200      	movs	r2, #0
 80016fa:	2102      	movs	r1, #2
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <W25qxx_WaitForWriteEnd+0x40>)
 80016fe:	f7fe fec5 	bl	800048c <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8001702:	2005      	movs	r0, #5
 8001704:	f7ff ffa8 	bl	8001658 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001708:	4c0a      	ldr	r4, [pc, #40]	; (8001734 <W25qxx_WaitForWriteEnd+0x44>)
 800170a:	20a5      	movs	r0, #165	; 0xa5
 800170c:	f7ff ffa4 	bl	8001658 <W25qxx_Spi>
 8001710:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
		W25qxx_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f7fe fd69 	bl	80001ec <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800171a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800171e:	07db      	lsls	r3, r3, #31
 8001720:	d4f3      	bmi.n	800170a <W25qxx_WaitForWriteEnd+0x1a>

	W25QFLASH_CS_UNSELECT;
 8001722:	2201      	movs	r2, #1
}
 8001724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	W25QFLASH_CS_UNSELECT;
 8001728:	2102      	movs	r1, #2
 800172a:	4801      	ldr	r0, [pc, #4]	; (8001730 <W25qxx_WaitForWriteEnd+0x40>)
 800172c:	f7fe beae 	b.w	800048c <HAL_GPIO_WritePin>
 8001730:	40010800 	.word	0x40010800
 8001734:	20000174 	.word	0x20000174

08001738 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8001738:	b538      	push	{r3, r4, r5, lr}
	w25qxx.Lock = 1;
 800173a:	2301      	movs	r3, #1
 800173c:	4cbe      	ldr	r4, [pc, #760]	; (8001a38 <W25qxx_Init+0x300>)
 800173e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	while(HAL_GetTick() < 100)
 8001742:	f7fe fd4d 	bl	80001e0 <HAL_GetTick>
 8001746:	2863      	cmp	r0, #99	; 0x63
 8001748:	d945      	bls.n	80017d6 <W25qxx_Init+0x9e>
	W25qxx_Delay(1);

	W25QFLASH_CS_UNSELECT;
 800174a:	2201      	movs	r2, #1
 800174c:	2102      	movs	r1, #2
 800174e:	48bb      	ldr	r0, [pc, #748]	; (8001a3c <W25qxx_Init+0x304>)
 8001750:	f7fe fe9c 	bl	800048c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	f7fe fd49 	bl	80001ec <HAL_Delay>

	uint32_t id;

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	220e      	movs	r2, #14
 8001760:	49b7      	ldr	r1, [pc, #732]	; (8001a40 <W25qxx_Init+0x308>)
 8001762:	48b8      	ldr	r0, [pc, #736]	; (8001a44 <W25qxx_Init+0x30c>)
 8001764:	f7ff fc9c 	bl	80010a0 <HAL_UART_Transmit>
	#endif
	
	id = W25qxx_ReadID();
 8001768:	f7ff ff8a 	bl	8001680 <W25qxx_ReadID>

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
 800176c:	4ab6      	ldr	r2, [pc, #728]	; (8001a48 <W25qxx_Init+0x310>)
 800176e:	4603      	mov	r3, r0
 8001770:	2140      	movs	r1, #64	; 0x40
	id = W25qxx_ReadID();
 8001772:	4605      	mov	r5, r0
	snprintf(buf, 64, "ID:0x%lX\n", id);
 8001774:	48b5      	ldr	r0, [pc, #724]	; (8001a4c <W25qxx_Init+0x314>)
 8001776:	f000 fe03 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 800177a:	48b4      	ldr	r0, [pc, #720]	; (8001a4c <W25qxx_Init+0x314>)
 800177c:	f7fe fce6 	bl	800014c <strlen>
 8001780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001784:	b282      	uxth	r2, r0
 8001786:	49b1      	ldr	r1, [pc, #708]	; (8001a4c <W25qxx_Init+0x314>)
 8001788:	48ae      	ldr	r0, [pc, #696]	; (8001a44 <W25qxx_Init+0x30c>)
 800178a:	f7ff fc89 	bl	80010a0 <HAL_UART_Transmit>
	#endif

	switch(id & 0x0000FFFF)
 800178e:	f244 0312 	movw	r3, #16402	; 0x4012
 8001792:	b2a8      	uxth	r0, r5
 8001794:	4298      	cmp	r0, r3
 8001796:	f000 8131 	beq.w	80019fc <W25qxx_Init+0x2c4>
 800179a:	d839      	bhi.n	8001810 <W25qxx_Init+0xd8>
 800179c:	f243 0314 	movw	r3, #12308	; 0x3014
 80017a0:	4298      	cmp	r0, r3
 80017a2:	f000 8181 	beq.w	8001aa8 <W25qxx_Init+0x370>
 80017a6:	d81a      	bhi.n	80017de <W25qxx_Init+0xa6>
 80017a8:	f243 0312 	movw	r3, #12306	; 0x3012
 80017ac:	4298      	cmp	r0, r3
 80017ae:	f000 8189 	beq.w	8001ac4 <W25qxx_Init+0x38c>
 80017b2:	f200 8180 	bhi.w	8001ab6 <W25qxx_Init+0x37e>
 80017b6:	f243 0311 	movw	r3, #12305	; 0x3011
 80017ba:	4298      	cmp	r0, r3
 80017bc:	f000 8189 	beq.w	8001ad2 <W25qxx_Init+0x39a>



		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
 80017c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c4:	220b      	movs	r2, #11
 80017c6:	49a2      	ldr	r1, [pc, #648]	; (8001a50 <W25qxx_Init+0x318>)
 80017c8:	489e      	ldr	r0, [pc, #632]	; (8001a44 <W25qxx_Init+0x30c>)
 80017ca:	f7ff fc69 	bl	80010a0 <HAL_UART_Transmit>
			#endif

			w25qxx.Lock = 0;
 80017ce:	2000      	movs	r0, #0
 80017d0:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
			return 0;
 80017d4:	bd38      	pop	{r3, r4, r5, pc}
	W25qxx_Delay(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7fe fd08 	bl	80001ec <HAL_Delay>
 80017dc:	e7b1      	b.n	8001742 <W25qxx_Init+0xa>
	switch(id & 0x0000FFFF)
 80017de:	f243 0316 	movw	r3, #12310	; 0x3016
 80017e2:	4298      	cmp	r0, r3
 80017e4:	f000 811a 	beq.w	8001a1c <W25qxx_Init+0x2e4>
 80017e8:	f0c0 811f 	bcc.w	8001a2a <W25qxx_Init+0x2f2>
 80017ec:	f243 0317 	movw	r3, #12311	; 0x3017
 80017f0:	4298      	cmp	r0, r3
 80017f2:	f000 810c 	beq.w	8001a0e <W25qxx_Init+0x2d6>
 80017f6:	f244 0311 	movw	r3, #16401	; 0x4011
 80017fa:	4298      	cmp	r0, r3
 80017fc:	d1e0      	bne.n	80017c0 <W25qxx_Init+0x88>
			w25qxx.ID = W25Q10;
 80017fe:	2301      	movs	r3, #1
 8001800:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 2;
 8001802:	2302      	movs	r3, #2
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 8001804:	220d      	movs	r2, #13
			w25qxx.BlockCount = 2;
 8001806:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
 8001808:	4992      	ldr	r1, [pc, #584]	; (8001a54 <W25qxx_Init+0x31c>)
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	e02e      	b.n	800186e <W25qxx_Init+0x136>
	switch(id & 0x0000FFFF)
 8001810:	f244 0316 	movw	r3, #16406	; 0x4016
 8001814:	4298      	cmp	r0, r3
 8001816:	f000 80d6 	beq.w	80019c6 <W25qxx_Init+0x28e>
 800181a:	d80f      	bhi.n	800183c <W25qxx_Init+0x104>
 800181c:	f244 0314 	movw	r3, #16404	; 0x4014
 8001820:	4298      	cmp	r0, r3
 8001822:	f000 80d9 	beq.w	80019d8 <W25qxx_Init+0x2a0>
 8001826:	f240 80e0 	bls.w	80019ea <W25qxx_Init+0x2b2>
			w25qxx.ID = W25Q16;
 800182a:	2305      	movs	r3, #5
 800182c:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 32;
 800182e:	2320      	movs	r3, #32
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 8001830:	220d      	movs	r2, #13
			w25qxx.BlockCount = 32;
 8001832:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
 8001834:	4988      	ldr	r1, [pc, #544]	; (8001a58 <W25qxx_Init+0x320>)
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	e018      	b.n	800186e <W25qxx_Init+0x136>
	switch(id & 0x0000FFFF)
 800183c:	f244 0318 	movw	r3, #16408	; 0x4018
 8001840:	4298      	cmp	r0, r3
 8001842:	f000 80ad 	beq.w	80019a0 <W25qxx_Init+0x268>
 8001846:	f0c0 80b5 	bcc.w	80019b4 <W25qxx_Init+0x27c>
 800184a:	f244 0319 	movw	r3, #16409	; 0x4019
 800184e:	4298      	cmp	r0, r3
 8001850:	f000 809c 	beq.w	800198c <W25qxx_Init+0x254>
 8001854:	f244 031a 	movw	r3, #16410	; 0x401a
 8001858:	4298      	cmp	r0, r3
 800185a:	d1b1      	bne.n	80017c0 <W25qxx_Init+0x88>
			w25qxx.ID = W25Q512;
 800185c:	230a      	movs	r3, #10
 800185e:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 1024;
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 8001864:	220e      	movs	r2, #14
			w25qxx.BlockCount = 1024;
 8001866:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
 8001868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186c:	497b      	ldr	r1, [pc, #492]	; (8001a5c <W25qxx_Init+0x324>)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 800186e:	4875      	ldr	r0, [pc, #468]	; (8001a44 <W25qxx_Init+0x30c>)
 8001870:	f7ff fc16 	bl	80010a0 <HAL_UART_Transmit>
	}


	w25qxx.PageSize = 256;
	w25qxx.SectorSize = 0x1000;
 8001874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001878:	6122      	str	r2, [r4, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800187a:	69e2      	ldr	r2, [r4, #28]
	w25qxx.PageSize = 256;
 800187c:	f44f 7380 	mov.w	r3, #256	; 0x100
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001880:	0111      	lsls	r1, r2, #4
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001882:	0412      	lsls	r2, r2, #16
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001884:	6161      	str	r1, [r4, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001886:	0a11      	lsrs	r1, r2, #8
 8001888:	60e1      	str	r1, [r4, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800188a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800188e:	0a92      	lsrs	r2, r2, #10
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001890:	61a1      	str	r1, [r4, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001892:	6222      	str	r2, [r4, #32]
	//W25qxx_ReadStatusRegister(1);
	//W25qxx_ReadStatusRegister(2);
	//W25qxx_ReadStatusRegister(3);

	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	4a72      	ldr	r2, [pc, #456]	; (8001a60 <W25qxx_Init+0x328>)
 8001898:	486c      	ldr	r0, [pc, #432]	; (8001a4c <W25qxx_Init+0x314>)
	w25qxx.PageSize = 256;
 800189a:	8163      	strh	r3, [r4, #10]
	snprintf(buf, 64, "Page Size: %d Bytes\n", w25qxx.PageSize);
 800189c:	f000 fd70 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80018a0:	486a      	ldr	r0, [pc, #424]	; (8001a4c <W25qxx_Init+0x314>)
 80018a2:	f7fe fc53 	bl	800014c <strlen>
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	b282      	uxth	r2, r0
 80018ac:	4967      	ldr	r1, [pc, #412]	; (8001a4c <W25qxx_Init+0x314>)
 80018ae:	4865      	ldr	r0, [pc, #404]	; (8001a44 <W25qxx_Init+0x30c>)
 80018b0:	f7ff fbf6 	bl	80010a0 <HAL_UART_Transmit>

	snprintf(buf, 64, "Page Count: %lu\n", w25qxx.PageCount);
 80018b4:	68e3      	ldr	r3, [r4, #12]
 80018b6:	4a6b      	ldr	r2, [pc, #428]	; (8001a64 <W25qxx_Init+0x32c>)
 80018b8:	2140      	movs	r1, #64	; 0x40
 80018ba:	4864      	ldr	r0, [pc, #400]	; (8001a4c <W25qxx_Init+0x314>)
 80018bc:	f000 fd60 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80018c0:	4862      	ldr	r0, [pc, #392]	; (8001a4c <W25qxx_Init+0x314>)
 80018c2:	f7fe fc43 	bl	800014c <strlen>
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	b282      	uxth	r2, r0
 80018cc:	495f      	ldr	r1, [pc, #380]	; (8001a4c <W25qxx_Init+0x314>)
 80018ce:	485d      	ldr	r0, [pc, #372]	; (8001a44 <W25qxx_Init+0x30c>)
 80018d0:	f7ff fbe6 	bl	80010a0 <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Size: %lu Bytes\n", w25qxx.SectorSize);
 80018d4:	6923      	ldr	r3, [r4, #16]
 80018d6:	4a64      	ldr	r2, [pc, #400]	; (8001a68 <W25qxx_Init+0x330>)
 80018d8:	2140      	movs	r1, #64	; 0x40
 80018da:	485c      	ldr	r0, [pc, #368]	; (8001a4c <W25qxx_Init+0x314>)
 80018dc:	f000 fd50 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 80018e0:	485a      	ldr	r0, [pc, #360]	; (8001a4c <W25qxx_Init+0x314>)
 80018e2:	f7fe fc33 	bl	800014c <strlen>
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	b282      	uxth	r2, r0
 80018ec:	4957      	ldr	r1, [pc, #348]	; (8001a4c <W25qxx_Init+0x314>)
 80018ee:	4855      	ldr	r0, [pc, #340]	; (8001a44 <W25qxx_Init+0x30c>)
 80018f0:	f7ff fbd6 	bl	80010a0 <HAL_UART_Transmit>

	snprintf(buf, 64, "Sector Count: %lu\n", w25qxx.SectorCount);
 80018f4:	6963      	ldr	r3, [r4, #20]
 80018f6:	4a5d      	ldr	r2, [pc, #372]	; (8001a6c <W25qxx_Init+0x334>)
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	4854      	ldr	r0, [pc, #336]	; (8001a4c <W25qxx_Init+0x314>)
 80018fc:	f000 fd40 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8001900:	4852      	ldr	r0, [pc, #328]	; (8001a4c <W25qxx_Init+0x314>)
 8001902:	f7fe fc23 	bl	800014c <strlen>
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	b282      	uxth	r2, r0
 800190c:	494f      	ldr	r1, [pc, #316]	; (8001a4c <W25qxx_Init+0x314>)
 800190e:	484d      	ldr	r0, [pc, #308]	; (8001a44 <W25qxx_Init+0x30c>)
 8001910:	f7ff fbc6 	bl	80010a0 <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Size: %lu Bytes\n", w25qxx.BlockSize);
 8001914:	69a3      	ldr	r3, [r4, #24]
 8001916:	4a56      	ldr	r2, [pc, #344]	; (8001a70 <W25qxx_Init+0x338>)
 8001918:	2140      	movs	r1, #64	; 0x40
 800191a:	484c      	ldr	r0, [pc, #304]	; (8001a4c <W25qxx_Init+0x314>)
 800191c:	f000 fd30 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8001920:	484a      	ldr	r0, [pc, #296]	; (8001a4c <W25qxx_Init+0x314>)
 8001922:	f7fe fc13 	bl	800014c <strlen>
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	b282      	uxth	r2, r0
 800192c:	4947      	ldr	r1, [pc, #284]	; (8001a4c <W25qxx_Init+0x314>)
 800192e:	4845      	ldr	r0, [pc, #276]	; (8001a44 <W25qxx_Init+0x30c>)
 8001930:	f7ff fbb6 	bl	80010a0 <HAL_UART_Transmit>

	snprintf(buf, 64, "Block Count: %lu\n", w25qxx.BlockCount);
 8001934:	69e3      	ldr	r3, [r4, #28]
 8001936:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <W25qxx_Init+0x33c>)
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	4844      	ldr	r0, [pc, #272]	; (8001a4c <W25qxx_Init+0x314>)
 800193c:	f000 fd20 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8001940:	4842      	ldr	r0, [pc, #264]	; (8001a4c <W25qxx_Init+0x314>)
 8001942:	f7fe fc03 	bl	800014c <strlen>
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	b282      	uxth	r2, r0
 800194c:	493f      	ldr	r1, [pc, #252]	; (8001a4c <W25qxx_Init+0x314>)
 800194e:	483d      	ldr	r0, [pc, #244]	; (8001a44 <W25qxx_Init+0x30c>)
 8001950:	f7ff fba6 	bl	80010a0 <HAL_UART_Transmit>

	snprintf(buf, 64, "Capacity: %lu KBytes\n", w25qxx.CapacityInKiloByte);
 8001954:	6a23      	ldr	r3, [r4, #32]
 8001956:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <W25qxx_Init+0x340>)
 8001958:	2140      	movs	r1, #64	; 0x40
 800195a:	483c      	ldr	r0, [pc, #240]	; (8001a4c <W25qxx_Init+0x314>)
 800195c:	f000 fd10 	bl	8002380 <sniprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
 8001960:	483a      	ldr	r0, [pc, #232]	; (8001a4c <W25qxx_Init+0x314>)
 8001962:	f7fe fbf3 	bl	800014c <strlen>
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	b282      	uxth	r2, r0
 800196c:	4937      	ldr	r1, [pc, #220]	; (8001a4c <W25qxx_Init+0x314>)
 800196e:	4835      	ldr	r0, [pc, #212]	; (8001a44 <W25qxx_Init+0x30c>)
 8001970:	f7ff fb96 	bl	80010a0 <HAL_UART_Transmit>

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
 8001974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001978:	220a      	movs	r2, #10
 800197a:	4940      	ldr	r1, [pc, #256]	; (8001a7c <W25qxx_Init+0x344>)
 800197c:	4831      	ldr	r0, [pc, #196]	; (8001a44 <W25qxx_Init+0x30c>)
 800197e:	f7ff fb8f 	bl	80010a0 <HAL_UART_Transmit>
	#endif

	w25qxx.Lock = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return 1;
 8001988:	2001      	movs	r0, #1
}	
 800198a:	bd38      	pop	{r3, r4, r5, pc}
			w25qxx.ID = W25Q256;
 800198c:	2309      	movs	r3, #9
 800198e:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 512;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 8001994:	220e      	movs	r2, #14
			w25qxx.BlockCount = 512;
 8001996:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
 8001998:	4939      	ldr	r1, [pc, #228]	; (8001a80 <W25qxx_Init+0x348>)
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	e766      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.ID = W25Q128;
 80019a0:	2308      	movs	r3, #8
 80019a2:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 256;
 80019a4:	f44f 7380 	mov.w	r3, #256	; 0x100
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 80019a8:	220e      	movs	r2, #14
			w25qxx.BlockCount = 256;
 80019aa:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
 80019ac:	4935      	ldr	r1, [pc, #212]	; (8001a84 <W25qxx_Init+0x34c>)
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	e75c      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.ID = W25Q64;
 80019b4:	2307      	movs	r3, #7
 80019b6:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 128;
 80019b8:	2380      	movs	r3, #128	; 0x80
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 80019ba:	220d      	movs	r2, #13
			w25qxx.BlockCount = 128;
 80019bc:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <W25qxx_Init+0x350>)
 80019c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c4:	e753      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.ID = W25Q32;
 80019c6:	2306      	movs	r3, #6
 80019c8:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 64;
 80019ca:	2340      	movs	r3, #64	; 0x40
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 80019cc:	220d      	movs	r2, #13
			w25qxx.BlockCount = 64;
 80019ce:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
 80019d0:	492e      	ldr	r1, [pc, #184]	; (8001a8c <W25qxx_Init+0x354>)
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	e74a      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.ID = W25Q80;
 80019d8:	2304      	movs	r3, #4
 80019da:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 16;
 80019dc:	2310      	movs	r3, #16
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 80019de:	220d      	movs	r2, #13
			w25qxx.BlockCount = 16;
 80019e0:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
 80019e2:	492b      	ldr	r1, [pc, #172]	; (8001a90 <W25qxx_Init+0x358>)
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	e741      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.ID = W25Q40;
 80019ea:	2303      	movs	r3, #3
 80019ec:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 8;
 80019ee:	2308      	movs	r3, #8
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 80019f0:	220d      	movs	r2, #13
			w25qxx.BlockCount = 8;
 80019f2:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
 80019f4:	4927      	ldr	r1, [pc, #156]	; (8001a94 <W25qxx_Init+0x35c>)
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	e738      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.ID = W25Q20;
 80019fc:	2302      	movs	r3, #2
 80019fe:	7023      	strb	r3, [r4, #0]
			w25qxx.BlockCount = 4;
 8001a00:	2304      	movs	r3, #4
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 8001a02:	220d      	movs	r2, #13
			w25qxx.BlockCount = 4;
 8001a04:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
 8001a06:	4924      	ldr	r1, [pc, #144]	; (8001a98 <W25qxx_Init+0x360>)
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	e72f      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.BlockCount = 128;
 8001a0e:	2380      	movs	r3, #128	; 0x80
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 8001a10:	220d      	movs	r2, #13
			w25qxx.BlockCount = 128;
 8001a12:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
 8001a14:	4921      	ldr	r1, [pc, #132]	; (8001a9c <W25qxx_Init+0x364>)
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	e728      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.BlockCount = 64;
 8001a1c:	2340      	movs	r3, #64	; 0x40
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 8001a1e:	220d      	movs	r2, #13
			w25qxx.BlockCount = 64;
 8001a20:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
 8001a22:	491f      	ldr	r1, [pc, #124]	; (8001aa0 <W25qxx_Init+0x368>)
 8001a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a28:	e721      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.BlockCount = 32;
 8001a2a:	2320      	movs	r3, #32
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 8001a2c:	220d      	movs	r2, #13
			w25qxx.BlockCount = 32;
 8001a2e:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
 8001a30:	491c      	ldr	r1, [pc, #112]	; (8001aa4 <W25qxx_Init+0x36c>)
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	e71a      	b.n	800186e <W25qxx_Init+0x136>
 8001a38:	20000174 	.word	0x20000174
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	08002c96 	.word	0x08002c96
 8001a44:	20000134 	.word	0x20000134
 8001a48:	08002ca5 	.word	0x08002ca5
 8001a4c:	20000090 	.word	0x20000090
 8001a50:	08002da0 	.word	0x08002da0
 8001a54:	08002d30 	.word	0x08002d30
 8001a58:	08002cf8 	.word	0x08002cf8
 8001a5c:	08002caf 	.word	0x08002caf
 8001a60:	08002dac 	.word	0x08002dac
 8001a64:	08002dc1 	.word	0x08002dc1
 8001a68:	08002dd2 	.word	0x08002dd2
 8001a6c:	08002dea 	.word	0x08002dea
 8001a70:	08002dfd 	.word	0x08002dfd
 8001a74:	08002e14 	.word	0x08002e14
 8001a78:	08002e26 	.word	0x08002e26
 8001a7c:	08002e3c 	.word	0x08002e3c
 8001a80:	08002cbe 	.word	0x08002cbe
 8001a84:	08002ccd 	.word	0x08002ccd
 8001a88:	08002cdc 	.word	0x08002cdc
 8001a8c:	08002cea 	.word	0x08002cea
 8001a90:	08002d06 	.word	0x08002d06
 8001a94:	08002d14 	.word	0x08002d14
 8001a98:	08002d22 	.word	0x08002d22
 8001a9c:	08002d3e 	.word	0x08002d3e
 8001aa0:	08002d4c 	.word	0x08002d4c
 8001aa4:	08002d5a 	.word	0x08002d5a
			w25qxx.BlockCount = 16;
 8001aa8:	2310      	movs	r3, #16
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 8001aaa:	220d      	movs	r2, #13
			w25qxx.BlockCount = 16;
 8001aac:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
 8001aae:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <W25qxx_Init+0x3a8>)
 8001ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab4:	e6db      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.BlockCount = 8;
 8001ab6:	2308      	movs	r3, #8
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 8001ab8:	220d      	movs	r2, #13
			w25qxx.BlockCount = 8;
 8001aba:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
 8001abc:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <W25qxx_Init+0x3ac>)
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	e6d4      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.BlockCount = 4;
 8001ac4:	2304      	movs	r3, #4
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 8001ac6:	220d      	movs	r2, #13
			w25qxx.BlockCount = 4;
 8001ac8:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
 8001aca:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <W25qxx_Init+0x3b0>)
 8001acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad0:	e6cd      	b.n	800186e <W25qxx_Init+0x136>
			w25qxx.BlockCount = 2;
 8001ad2:	2302      	movs	r3, #2
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 8001ad4:	220d      	movs	r2, #13
			w25qxx.BlockCount = 2;
 8001ad6:	61e3      	str	r3, [r4, #28]
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
 8001ad8:	4904      	ldr	r1, [pc, #16]	; (8001aec <W25qxx_Init+0x3b4>)
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	e6c6      	b.n	800186e <W25qxx_Init+0x136>
 8001ae0:	08002d68 	.word	0x08002d68
 8001ae4:	08002d76 	.word	0x08002d76
 8001ae8:	08002d84 	.word	0x08002d84
 8001aec:	08002d92 	.word	0x08002d92

08001af0 <W25qxx_EraseBlock>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8001af0:	b570      	push	{r4, r5, r6, lr}
	while(w25qxx.Lock == 1)
 8001af2:	4d1e      	ldr	r5, [pc, #120]	; (8001b6c <W25qxx_EraseBlock+0x7c>)
{
 8001af4:	4604      	mov	r4, r0
 8001af6:	462e      	mov	r6, r5
	while(w25qxx.Lock == 1)
 8001af8:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 8001afc:	2801      	cmp	r0, #1
 8001afe:	d031      	beq.n	8001b64 <W25qxx_EraseBlock+0x74>
		W25qxx_Delay(1);

	w25qxx.Lock = 1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 8001b06:	f7ff fdf3 	bl	80016f0 <W25qxx_WaitForWriteEnd>

	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 8001b0a:	692b      	ldr	r3, [r5, #16]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	435c      	muls	r4, r3

	W25qxx_WriteEnable();
 8001b10:	f7ff fdd8 	bl	80016c4 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8001b14:	2200      	movs	r2, #0
 8001b16:	2102      	movs	r1, #2
 8001b18:	4815      	ldr	r0, [pc, #84]	; (8001b70 <W25qxx_EraseBlock+0x80>)
 8001b1a:	f7fe fcb7 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_BLOCK_ERASE);
 8001b1e:	20d8      	movs	r0, #216	; 0xd8
 8001b20:	f7ff fd9a 	bl	8001658 <W25qxx_Spi>

	if(w25qxx.ID>=W25Q256)
 8001b24:	782b      	ldrb	r3, [r5, #0]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d902      	bls.n	8001b30 <W25qxx_EraseBlock+0x40>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8001b2a:	0e20      	lsrs	r0, r4, #24
 8001b2c:	f7ff fd94 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8001b30:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001b34:	f7ff fd90 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8001b38:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001b3c:	f7ff fd8c 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 8001b40:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
 8001b44:	f7ff fd88 	bl	8001658 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <W25qxx_EraseBlock+0x80>)
 8001b4e:	f7fe fc9d 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8001b52:	f7ff fdcd 	bl	80016f0 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7fe fb48 	bl	80001ec <HAL_Delay>
	w25qxx.Lock = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
		W25qxx_Delay(1);
 8001b64:	f7fe fb42 	bl	80001ec <HAL_Delay>
 8001b68:	e7c6      	b.n	8001af8 <W25qxx_EraseBlock+0x8>
 8001b6a:	bf00      	nop
 8001b6c:	20000174 	.word	0x20000174
 8001b70:	40010800 	.word	0x40010800

08001b74 <W25qxx_SectorToPage>:
}

//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
	return(SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8001b74:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <W25qxx_SectorToPage+0x10>)
 8001b76:	6913      	ldr	r3, [r2, #16]
 8001b78:	4358      	muls	r0, r3
 8001b7a:	8953      	ldrh	r3, [r2, #10]
}
 8001b7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000174 	.word	0x20000174

08001b88 <W25qxx_BlockToPage>:

//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 8001b88:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <W25qxx_BlockToPage+0x10>)
 8001b8a:	6993      	ldr	r3, [r2, #24]
 8001b8c:	4358      	muls	r0, r3
 8001b8e:	8953      	ldrh	r3, [r2, #10]
}
 8001b90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000174 	.word	0x20000174

08001b9c <W25qxx_IsEmptyPage>:

//###################################################################################################################
uint8_t W25qxx_IsEmptyPage(uint32_t Page_Address, uint32_t OffsetInByte)
{
 8001b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while(w25qxx.Lock == 1)
 8001ba0:	4d2b      	ldr	r5, [pc, #172]	; (8001c50 <W25qxx_IsEmptyPage+0xb4>)
{
 8001ba2:	4681      	mov	r9, r0
 8001ba4:	4688      	mov	r8, r1
 8001ba6:	462f      	mov	r7, r5
 8001ba8:	b0c1      	sub	sp, #260	; 0x104
	while(w25qxx.Lock == 1)
 8001baa:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 8001bae:	2801      	cmp	r0, #1
 8001bb0:	d03e      	beq.n	8001c30 <W25qxx_IsEmptyPage+0x94>
	W25qxx_Delay(1);

	w25qxx.Lock = 1;
 8001bb2:	2301      	movs	r3, #1

	uint8_t	pBuffer[256] = {0,};
 8001bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4668      	mov	r0, sp
	w25qxx.Lock = 1;
 8001bbc:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	uint8_t	pBuffer[256] = {0,};
 8001bc0:	f000 fbd6 	bl	8002370 <memset>
	uint16_t size = 0;

	size = w25qxx.PageSize - OffsetInByte;
	WorkAddress = (OffsetInByte + Page_Address * w25qxx.PageSize);

	W25QFLASH_CS_SELECT;
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	4822      	ldr	r0, [pc, #136]	; (8001c54 <W25qxx_IsEmptyPage+0xb8>)
	size = w25qxx.PageSize - OffsetInByte;
 8001bca:	896c      	ldrh	r4, [r5, #10]
	W25QFLASH_CS_SELECT;
 8001bcc:	f7fe fc5e 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 8001bd0:	200b      	movs	r0, #11
 8001bd2:	f7ff fd41 	bl	8001658 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8001bd6:	782b      	ldrb	r3, [r5, #0]
	size = w25qxx.PageSize - OffsetInByte;
 8001bd8:	eba4 0608 	sub.w	r6, r4, r8
	if(w25qxx.ID >= W25Q256)
 8001bdc:	2b08      	cmp	r3, #8
	size = w25qxx.PageSize - OffsetInByte;
 8001bde:	b2b6      	uxth	r6, r6
	WorkAddress = (OffsetInByte + Page_Address * w25qxx.PageSize);
 8001be0:	fb09 8404 	mla	r4, r9, r4, r8
	if(w25qxx.ID >= W25Q256)
 8001be4:	d902      	bls.n	8001bec <W25qxx_IsEmptyPage+0x50>
		W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001be6:	0e20      	lsrs	r0, r4, #24
 8001be8:	f7ff fd36 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001bec:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001bf0:	f7ff fd32 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001bf4:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001bf8:	f7ff fd2e 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(WorkAddress & 0xFF);
 8001bfc:	b2e0      	uxtb	r0, r4
 8001bfe:	f7ff fd2b 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi(0);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fd28 	bl	8001658 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, size, 100);
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	4632      	mov	r2, r6
 8001c0c:	4669      	mov	r1, sp
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <W25qxx_IsEmptyPage+0xbc>)
 8001c10:	f7ff f91e 	bl	8000e50 <HAL_SPI_Receive>

	W25QFLASH_CS_UNSELECT;
 8001c14:	2201      	movs	r2, #1
 8001c16:	2102      	movs	r1, #2
 8001c18:	480e      	ldr	r0, [pc, #56]	; (8001c54 <W25qxx_IsEmptyPage+0xb8>)
 8001c1a:	f7fe fc37 	bl	800048c <HAL_GPIO_WritePin>

	for(uint16_t i = 0; i < size; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4296      	cmp	r6, r2
 8001c24:	d807      	bhi.n	8001c36 <W25qxx_IsEmptyPage+0x9a>
			w25qxx.Lock = 0;
			return 0;
		}
	}

	w25qxx.Lock = 0;
 8001c26:	2300      	movs	r3, #0
	return 1;
 8001c28:	2001      	movs	r0, #1
	w25qxx.Lock = 0;
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return 1;
 8001c2e:	e00c      	b.n	8001c4a <W25qxx_IsEmptyPage+0xae>
	W25qxx_Delay(1);
 8001c30:	f7fe fadc 	bl	80001ec <HAL_Delay>
 8001c34:	e7b9      	b.n	8001baa <W25qxx_IsEmptyPage+0xe>
 8001c36:	3301      	adds	r3, #1
		if(pBuffer[i] != 0xFF)
 8001c38:	eb0d 0203 	add.w	r2, sp, r3
 8001c3c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8001c40:	2aff      	cmp	r2, #255	; 0xff
 8001c42:	d0ed      	beq.n	8001c20 <W25qxx_IsEmptyPage+0x84>
			w25qxx.Lock = 0;
 8001c44:	2000      	movs	r0, #0
 8001c46:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
}
 8001c4a:	b041      	add	sp, #260	; 0x104
 8001c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c50:	20000174 	.word	0x20000174
 8001c54:	40010800 	.word	0x40010800
 8001c58:	200000dc 	.word	0x200000dc

08001c5c <W25qxx_IsEmptySector>:

//##################################################################################################################
uint8_t W25qxx_IsEmptySector(uint32_t Sector_Address, uint32_t OffsetInByte)
{
 8001c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while(w25qxx.Lock == 1)
 8001c60:	4d3a      	ldr	r5, [pc, #232]	; (8001d4c <W25qxx_IsEmptySector+0xf0>)
{
 8001c62:	4681      	mov	r9, r0
 8001c64:	460f      	mov	r7, r1
 8001c66:	46a8      	mov	r8, r5
 8001c68:	b0c0      	sub	sp, #256	; 0x100
	while(w25qxx.Lock == 1)
 8001c6a:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 8001c6e:	2801      	cmp	r0, #1
 8001c70:	d025      	beq.n	8001cbe <W25qxx_IsEmptySector+0x62>
	W25qxx_Delay(1);

	w25qxx.Lock = 1;
 8001c72:	2601      	movs	r6, #1

	uint8_t	pBuffer[256] = {0,};
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4668      	mov	r0, sp
	w25qxx.Lock = 1;
 8001c7c:	f885 6027 	strb.w	r6, [r5, #39]	; 0x27
	uint8_t	pBuffer[256] = {0,};
 8001c80:	f000 fb76 	bl	8002370 <memset>
	uint32_t WorkAddress = 0;
	uint16_t s_buf = 256;
	uint16_t size = 0;

	size = w25qxx.SectorSize - OffsetInByte;
 8001c84:	692c      	ldr	r4, [r5, #16]
 8001c86:	1be5      	subs	r5, r4, r7
 8001c88:	b2ad      	uxth	r5, r5

	uint16_t cikl = size / 256;
	uint16_t cikl2 = size % 256;
	uint16_t count_cikle = 0;

	if(size <= 256)
 8001c8a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
	WorkAddress = (OffsetInByte + Sector_Address * w25qxx.SectorSize);
 8001c8e:	fb09 7404 	mla	r4, r9, r4, r7
	if(size <= 256)
 8001c92:	d917      	bls.n	8001cc4 <W25qxx_IsEmptySector+0x68>
	{
		count_cikle = 1;
		//HAL_UART_Transmit(&huart1, (uint8_t*)"1\n", 2, 100);
	}
	else if(cikl2 == 0)
 8001c94:	f015 0fff 	tst.w	r5, #255	; 0xff
	uint16_t cikl = size / 256;
 8001c98:	ea4f 2315 	mov.w	r3, r5, lsr #8
	else if(cikl2 == 0)
 8001c9c:	d000      	beq.n	8001ca0 <W25qxx_IsEmptySector+0x44>
		count_cikle = cikl;
		//HAL_UART_Transmit(&huart1, (uint8_t*)"2\n", 2, 100);
	}
	else
	{
		count_cikle = cikl + 1;
 8001c9e:	4433      	add	r3, r6
	uint16_t s_buf = 256;
 8001ca0:	f44f 7780 	mov.w	r7, #256	; 0x100
	}


	for(uint16_t i = 0; i < count_cikle; i++)
	{
		W25QFLASH_CS_SELECT;
 8001ca4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001d50 <W25qxx_IsEmptySector+0xf4>
		if(size < 256) s_buf = size;

//snprintf(buf2, 64, "RECIV %d %d %d %lu\n", size, s_buf, i, WorkAddress);
//HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), 100);

		HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, s_buf, 100);
 8001ca8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8001d54 <W25qxx_IsEmptySector+0xf8>
 8001cac:	eb04 2603 	add.w	r6, r4, r3, lsl #8
	for(uint16_t i = 0; i < count_cikle; i++)
 8001cb0:	42b4      	cmp	r4, r6
 8001cb2:	d109      	bne.n	8001cc8 <W25qxx_IsEmptySector+0x6c>

		size = size - 256;
		WorkAddress = WorkAddress + 256;
	}

	w25qxx.Lock = 0;
 8001cb4:	2300      	movs	r3, #0
	return 1;
 8001cb6:	2001      	movs	r0, #1
	w25qxx.Lock = 0;
 8001cb8:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
	return 1;
 8001cbc:	e043      	b.n	8001d46 <W25qxx_IsEmptySector+0xea>
	W25qxx_Delay(1);
 8001cbe:	f7fe fa95 	bl	80001ec <HAL_Delay>
 8001cc2:	e7d2      	b.n	8001c6a <W25qxx_IsEmptySector+0xe>
		count_cikle = 1;
 8001cc4:	4633      	mov	r3, r6
 8001cc6:	e7eb      	b.n	8001ca0 <W25qxx_IsEmptySector+0x44>
		W25QFLASH_CS_SELECT;
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4648      	mov	r0, r9
 8001cce:	f7fe fbdd 	bl	800048c <HAL_GPIO_WritePin>
		W25qxx_Spi(W25_FAST_READ);
 8001cd2:	200b      	movs	r0, #11
 8001cd4:	f7ff fcc0 	bl	8001658 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001cd8:	f898 3000 	ldrb.w	r3, [r8]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d902      	bls.n	8001ce6 <W25qxx_IsEmptySector+0x8a>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001ce0:	0e20      	lsrs	r0, r4, #24
 8001ce2:	f7ff fcb9 	bl	8001658 <W25qxx_Spi>
		if(size < 256) s_buf = size;
 8001ce6:	2dff      	cmp	r5, #255	; 0xff
 8001ce8:	bf98      	it	ls
 8001cea:	462f      	movls	r7, r5
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001cec:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001cf0:	f7ff fcb2 	bl	8001658 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001cf4:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001cf8:	f7ff fcae 	bl	8001658 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8001cfc:	b2e0      	uxtb	r0, r4
 8001cfe:	f7ff fcab 	bl	8001658 <W25qxx_Spi>
		W25qxx_Spi(0);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fca8 	bl	8001658 <W25qxx_Spi>
		HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, s_buf, 100);
 8001d08:	2364      	movs	r3, #100	; 0x64
 8001d0a:	463a      	mov	r2, r7
 8001d0c:	4669      	mov	r1, sp
 8001d0e:	4650      	mov	r0, sl
 8001d10:	f7ff f89e 	bl	8000e50 <HAL_SPI_Receive>
		W25QFLASH_CS_UNSELECT;
 8001d14:	2201      	movs	r2, #1
 8001d16:	2102      	movs	r1, #2
 8001d18:	4648      	mov	r0, r9
 8001d1a:	f7fe fbb7 	bl	800048c <HAL_GPIO_WritePin>
		for(uint16_t i = 0; i < s_buf; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4297      	cmp	r7, r2
 8001d24:	d805      	bhi.n	8001d32 <W25qxx_IsEmptySector+0xd6>
		size = size - 256;
 8001d26:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
 8001d2a:	b2ad      	uxth	r5, r5
		WorkAddress = WorkAddress + 256;
 8001d2c:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8001d30:	e7be      	b.n	8001cb0 <W25qxx_IsEmptySector+0x54>
 8001d32:	3301      	adds	r3, #1
			if(pBuffer[i] != 0xFF)
 8001d34:	eb0d 0203 	add.w	r2, sp, r3
 8001d38:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8001d3c:	2aff      	cmp	r2, #255	; 0xff
 8001d3e:	d0ef      	beq.n	8001d20 <W25qxx_IsEmptySector+0xc4>
				w25qxx.Lock = 0;
 8001d40:	2000      	movs	r0, #0
 8001d42:	f888 0027 	strb.w	r0, [r8, #39]	; 0x27
}
 8001d46:	b040      	add	sp, #256	; 0x100
 8001d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d4c:	20000174 	.word	0x20000174
 8001d50:	40010800 	.word	0x40010800
 8001d54:	200000dc 	.word	0x200000dc

08001d58 <W25qxx_IsEmptyBlock>:

//###################################################################################################################
uint8_t W25qxx_IsEmptyBlock(uint32_t Block_Address, uint32_t OffsetInByte)
{
 8001d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(w25qxx.Lock == 1)
 8001d5c:	4c3b      	ldr	r4, [pc, #236]	; (8001e4c <W25qxx_IsEmptyBlock+0xf4>)
{
 8001d5e:	4680      	mov	r8, r0
 8001d60:	460f      	mov	r7, r1
 8001d62:	4626      	mov	r6, r4
 8001d64:	b0c1      	sub	sp, #260	; 0x104
	while(w25qxx.Lock == 1)
 8001d66:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
 8001d6a:	2801      	cmp	r0, #1
 8001d6c:	d028      	beq.n	8001dc0 <W25qxx_IsEmptyBlock+0x68>
	W25qxx_Delay(1);

	w25qxx.Lock = 1;
 8001d6e:	2501      	movs	r5, #1

	uint8_t	pBuffer[256] = {0,};
 8001d70:	2100      	movs	r1, #0
 8001d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d76:	4668      	mov	r0, sp
	w25qxx.Lock = 1;
 8001d78:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
	uint8_t	pBuffer[256] = {0,};
 8001d7c:	f000 faf8 	bl	8002370 <memset>
	uint32_t WorkAddress = 0;
	uint16_t s_buf = 256;
	uint32_t size = 0;

	size = w25qxx.BlockSize - OffsetInByte;
 8001d80:	69a1      	ldr	r1, [r4, #24]
 8001d82:	1bcc      	subs	r4, r1, r7

	uint16_t cikl = size / 256;
	uint16_t cikl2 = size % 256;
	uint16_t count_cikle = 0;

	if(size <= 256)
 8001d84:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
	WorkAddress = (OffsetInByte + Block_Address * w25qxx.BlockSize);
 8001d88:	fb08 7101 	mla	r1, r8, r1, r7
	if(size <= 256)
 8001d8c:	d91b      	bls.n	8001dc6 <W25qxx_IsEmptyBlock+0x6e>
	{
		count_cikle = 1;
		//HAL_UART_Transmit(&huart1, (uint8_t*)"1\n", 2, 100);
	}
	else if(cikl2 == 0)
 8001d8e:	f014 0fff 	tst.w	r4, #255	; 0xff
	uint16_t cikl = size / 256;
 8001d92:	f3c4 230f 	ubfx	r3, r4, #8, #16
	else if(cikl2 == 0)
 8001d96:	d001      	beq.n	8001d9c <W25qxx_IsEmptyBlock+0x44>
		count_cikle = cikl;
		//HAL_UART_Transmit(&huart1, (uint8_t*)"2\n", 2, 100);
	}
	else
	{
		count_cikle = cikl + 1;
 8001d98:	442b      	add	r3, r5
 8001d9a:	b29b      	uxth	r3, r3
	uint16_t s_buf = 256;
 8001d9c:	f44f 7980 	mov.w	r9, #256	; 0x100
	}


	for(uint16_t i = 0; i < count_cikle; i++)
	{
		W25QFLASH_CS_SELECT;
 8001da0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8001e50 <W25qxx_IsEmptyBlock+0xf8>
		if(size < 256) s_buf = size;

//snprintf(buf2, 64, "RECIVB %lu %d %d %lu\n", size, s_buf, i, WorkAddress);
//HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), 100);

		HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, s_buf, 100);
 8001da4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8001e54 <W25qxx_IsEmptyBlock+0xfc>
 8001da8:	eba4 2703 	sub.w	r7, r4, r3, lsl #8
 8001dac:	1865      	adds	r5, r4, r1
	for(uint16_t i = 0; i < count_cikle; i++)
 8001dae:	42bc      	cmp	r4, r7
 8001db0:	eba5 0804 	sub.w	r8, r5, r4
 8001db4:	d109      	bne.n	8001dca <W25qxx_IsEmptyBlock+0x72>

		size = size - 256;
		WorkAddress = WorkAddress + 256;
	}

	w25qxx.Lock = 0;
 8001db6:	2300      	movs	r3, #0
	return 1;
 8001db8:	2001      	movs	r0, #1
	w25qxx.Lock = 0;
 8001dba:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
	return 1;
 8001dbe:	e042      	b.n	8001e46 <W25qxx_IsEmptyBlock+0xee>
	W25qxx_Delay(1);
 8001dc0:	f7fe fa14 	bl	80001ec <HAL_Delay>
 8001dc4:	e7cf      	b.n	8001d66 <W25qxx_IsEmptyBlock+0xe>
		count_cikle = 1;
 8001dc6:	462b      	mov	r3, r5
 8001dc8:	e7e8      	b.n	8001d9c <W25qxx_IsEmptyBlock+0x44>
		W25QFLASH_CS_SELECT;
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4650      	mov	r0, sl
 8001dd0:	f7fe fb5c 	bl	800048c <HAL_GPIO_WritePin>
		W25qxx_Spi(W25_FAST_READ);
 8001dd4:	200b      	movs	r0, #11
 8001dd6:	f7ff fc3f 	bl	8001658 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001dda:	7833      	ldrb	r3, [r6, #0]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d903      	bls.n	8001de8 <W25qxx_IsEmptyBlock+0x90>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001de0:	ea4f 6018 	mov.w	r0, r8, lsr #24
 8001de4:	f7ff fc38 	bl	8001658 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001de8:	f3c8 4007 	ubfx	r0, r8, #16, #8
 8001dec:	f7ff fc34 	bl	8001658 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001df0:	f3c8 2007 	ubfx	r0, r8, #8, #8
 8001df4:	f7ff fc30 	bl	8001658 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8001df8:	fa5f f088 	uxtb.w	r0, r8
 8001dfc:	f7ff fc2c 	bl	8001658 <W25qxx_Spi>
		W25qxx_Spi(0);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fc29 	bl	8001658 <W25qxx_Spi>
		if(size < 256) s_buf = size;
 8001e06:	2cff      	cmp	r4, #255	; 0xff
 8001e08:	bf98      	it	ls
 8001e0a:	fa1f f984 	uxthls.w	r9, r4
		HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, s_buf, 100);
 8001e0e:	2364      	movs	r3, #100	; 0x64
 8001e10:	464a      	mov	r2, r9
 8001e12:	4669      	mov	r1, sp
 8001e14:	4658      	mov	r0, fp
 8001e16:	f7ff f81b 	bl	8000e50 <HAL_SPI_Receive>
		W25QFLASH_CS_UNSELECT;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4650      	mov	r0, sl
 8001e20:	f7fe fb34 	bl	800048c <HAL_GPIO_WritePin>
		for(uint16_t i = 0; i < s_buf; i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4591      	cmp	r9, r2
 8001e2a:	d802      	bhi.n	8001e32 <W25qxx_IsEmptyBlock+0xda>
		size = size - 256;
 8001e2c:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
 8001e30:	e7bd      	b.n	8001dae <W25qxx_IsEmptyBlock+0x56>
 8001e32:	3301      	adds	r3, #1
			if(pBuffer[i] != 0xFF)
 8001e34:	eb0d 0203 	add.w	r2, sp, r3
 8001e38:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8001e3c:	2aff      	cmp	r2, #255	; 0xff
 8001e3e:	d0f2      	beq.n	8001e26 <W25qxx_IsEmptyBlock+0xce>
				w25qxx.Lock = 0;
 8001e40:	2000      	movs	r0, #0
 8001e42:	f886 0027 	strb.w	r0, [r6, #39]	; 0x27
}
 8001e46:	b041      	add	sp, #260	; 0x104
 8001e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e4c:	20000174 	.word	0x20000174
 8001e50:	40010800 	.word	0x40010800
 8001e54:	200000dc 	.word	0x200000dc

08001e58 <W25qxx_WriteByte>:

//###################################################################################################################
void W25qxx_WriteByte(uint8_t byte, uint32_t addr)
{
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(w25qxx.Lock == 1)
 8001e5a:	4d1c      	ldr	r5, [pc, #112]	; (8001ecc <W25qxx_WriteByte+0x74>)
{
 8001e5c:	4607      	mov	r7, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	462e      	mov	r6, r5
	while(w25qxx.Lock == 1)
 8001e62:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 8001e66:	2801      	cmp	r0, #1
 8001e68:	d02d      	beq.n	8001ec6 <W25qxx_WriteByte+0x6e>
		W25qxx_Delay(1);

	w25qxx.Lock = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 8001e70:	f7ff fc3e 	bl	80016f0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8001e74:	f7ff fc26 	bl	80016c4 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <W25qxx_WriteByte+0x78>)
 8001e7e:	f7fe fb05 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 8001e82:	2002      	movs	r0, #2
 8001e84:	f7ff fbe8 	bl	8001658 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8001e88:	782b      	ldrb	r3, [r5, #0]
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d902      	bls.n	8001e94 <W25qxx_WriteByte+0x3c>
		W25qxx_Spi((addr & 0xFF000000) >> 24);
 8001e8e:	0e20      	lsrs	r0, r4, #24
 8001e90:	f7ff fbe2 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi((addr & 0xFF0000) >> 16);
 8001e94:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001e98:	f7ff fbde 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi((addr & 0xFF00) >> 8);
 8001e9c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001ea0:	f7ff fbda 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(addr & 0xFF);
 8001ea4:	b2e0      	uxtb	r0, r4
 8001ea6:	f7ff fbd7 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi(byte);
 8001eaa:	4638      	mov	r0, r7
 8001eac:	f7ff fbd4 	bl	8001658 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <W25qxx_WriteByte+0x78>)
 8001eb6:	f7fe fae9 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8001eba:	f7ff fc19 	bl	80016f0 <W25qxx_WaitForWriteEnd>

	w25qxx.Lock = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 8001ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		W25qxx_Delay(1);
 8001ec6:	f7fe f991 	bl	80001ec <HAL_Delay>
 8001eca:	e7ca      	b.n	8001e62 <W25qxx_WriteByte+0xa>
 8001ecc:	20000174 	.word	0x20000174
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <W25qxx_WritePage>:
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while(w25qxx.Lock == 1)
 8001ed8:	4f28      	ldr	r7, [pc, #160]	; (8001f7c <W25qxx_WritePage+0xa8>)
{
 8001eda:	4681      	mov	r9, r0
 8001edc:	468a      	mov	sl, r1
 8001ede:	4616      	mov	r6, r2
 8001ee0:	461c      	mov	r4, r3
 8001ee2:	46b8      	mov	r8, r7
	while(w25qxx.Lock == 1)
 8001ee4:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8001ee8:	2801      	cmp	r0, #1
 8001eea:	d043      	beq.n	8001f74 <W25qxx_WritePage+0xa0>
		W25qxx_Delay(1);

	w25qxx.Lock = 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001ef2:	897b      	ldrh	r3, [r7, #10]
 8001ef4:	19a2      	adds	r2, r4, r6
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d800      	bhi.n	8001efc <W25qxx_WritePage+0x28>
 8001efa:	b904      	cbnz	r4, 8001efe <W25qxx_WritePage+0x2a>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001efc:	1b9c      	subs	r4, r3, r6

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001efe:	19a2      	adds	r2, r4, r6
 8001f00:	4293      	cmp	r3, r2
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001f02:	bf38      	it	cc
 8001f04:	1b9c      	subcc	r4, r3, r6


	W25qxx_WaitForWriteEnd();
 8001f06:	f7ff fbf3 	bl	80016f0 <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 8001f0a:	f7ff fbdb 	bl	80016c4 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	481b      	ldr	r0, [pc, #108]	; (8001f80 <W25qxx_WritePage+0xac>)
 8001f14:	f7fe faba 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7ff fb9d 	bl	8001658 <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;

	if(w25qxx.ID >= W25Q256)
 8001f1e:	f898 3000 	ldrb.w	r3, [r8]
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001f22:	f8b8 500a 	ldrh.w	r5, [r8, #10]
	if(w25qxx.ID >= W25Q256)
 8001f26:	2b08      	cmp	r3, #8
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001f28:	fb0a 6505 	mla	r5, sl, r5, r6
	if(w25qxx.ID >= W25Q256)
 8001f2c:	d902      	bls.n	8001f34 <W25qxx_WritePage+0x60>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001f2e:	0e28      	lsrs	r0, r5, #24
 8001f30:	f7ff fb92 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001f34:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001f38:	f7ff fb8e 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001f3c:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001f40:	f7ff fb8a 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001f44:	b2e8      	uxtb	r0, r5
 8001f46:	f7ff fb87 	bl	8001658 <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8001f4a:	2364      	movs	r3, #100	; 0x64
 8001f4c:	b2a2      	uxth	r2, r4
 8001f4e:	4649      	mov	r1, r9
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <W25qxx_WritePage+0xb0>)
 8001f52:	f7fe fde4 	bl	8000b1e <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 8001f56:	2201      	movs	r2, #1
 8001f58:	2102      	movs	r1, #2
 8001f5a:	4809      	ldr	r0, [pc, #36]	; (8001f80 <W25qxx_WritePage+0xac>)
 8001f5c:	f7fe fa96 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8001f60:	f7ff fbc6 	bl	80016f0 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7fe f941 	bl	80001ec <HAL_Delay>
	w25qxx.Lock = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
 8001f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		W25qxx_Delay(1);
 8001f74:	f7fe f93a 	bl	80001ec <HAL_Delay>
 8001f78:	e7b4      	b.n	8001ee4 <W25qxx_WritePage+0x10>
 8001f7a:	bf00      	nop
 8001f7c:	20000174 	.word	0x20000174
 8001f80:	40010800 	.word	0x40010800
 8001f84:	200000dc 	.word	0x200000dc

08001f88 <W25qxx_WriteSector>:
}

//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001f8c:	4e16      	ldr	r6, [pc, #88]	; (8001fe8 <W25qxx_WriteSector+0x60>)
{
 8001f8e:	4607      	mov	r7, r0
	if((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001f90:	6935      	ldr	r5, [r6, #16]
{
 8001f92:	4691      	mov	r9, r2
	if((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001f94:	429d      	cmp	r5, r3
 8001f96:	d325      	bcc.n	8001fe4 <W25qxx_WriteSector+0x5c>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf08      	it	eq
 8001f9c:	462b      	moveq	r3, r5

	uint32_t StartPage;
	int32_t	BytesToWrite;
	uint32_t LocalOffset;

	if((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001f9e:	eb03 0209 	add.w	r2, r3, r9
 8001fa2:	4295      	cmp	r5, r2
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	

	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001fa4:	4608      	mov	r0, r1
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8001fa6:	bf34      	ite	cc
 8001fa8:	eba5 0509 	subcc.w	r5, r5, r9
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8001fac:	461d      	movcs	r5, r3
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8001fae:	f7ff fde1 	bl	8001b74 <W25qxx_SectorToPage>
 8001fb2:	8972      	ldrh	r2, [r6, #10]
 8001fb4:	fbb9 f4f2 	udiv	r4, r9, r2
 8001fb8:	eb04 0800 	add.w	r8, r4, r0
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8001fbc:	fb02 9414 	mls	r4, r2, r4, r9

	do
	{		
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	4641      	mov	r1, r8
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	f7ff ff84 	bl	8001ed4 <W25qxx_WritePage>
		StartPage++;

		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001fcc:	8972      	ldrh	r2, [r6, #10]
		StartPage++;
 8001fce:	f108 0801 	add.w	r8, r8, #1
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8001fd2:	1aab      	subs	r3, r5, r2
 8001fd4:	191d      	adds	r5, r3, r4
		//pBuffer += w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001fd6:	1b12      	subs	r2, r2, r4
		LocalOffset = 0;
 8001fd8:	2400      	movs	r4, #0
	}
	while(BytesToWrite > 0);
 8001fda:	42a5      	cmp	r5, r4
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001fdc:	4417      	add	r7, r2
	while(BytesToWrite > 0);
 8001fde:	dcef      	bgt.n	8001fc0 <W25qxx_WriteSector+0x38>
}
 8001fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	e7da      	b.n	8001f9e <W25qxx_WriteSector+0x16>
 8001fe8:	20000174 	.word	0x20000174

08001fec <W25qxx_WriteBlock>:

//###################################################################################################################
void W25qxx_WriteBlock(uint8_t* pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_BlockSize)
{
 8001fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize == 0))
 8001ff0:	4e16      	ldr	r6, [pc, #88]	; (800204c <W25qxx_WriteBlock+0x60>)
{
 8001ff2:	4607      	mov	r7, r0
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize == 0))
 8001ff4:	69b5      	ldr	r5, [r6, #24]
{
 8001ff6:	4691      	mov	r9, r2
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize == 0))
 8001ff8:	429d      	cmp	r5, r3
 8001ffa:	d325      	bcc.n	8002048 <W25qxx_WriteBlock+0x5c>
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf08      	it	eq
 8002000:	462b      	moveq	r3, r5

	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;

	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8002002:	eb03 0209 	add.w	r2, r3, r9
 8002006:	4295      	cmp	r5, r2
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	

	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8002008:	4608      	mov	r0, r1
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
 800200a:	bf34      	ite	cc
 800200c:	eba5 0509 	subcc.w	r5, r5, r9
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8002010:	461d      	movcs	r5, r3
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8002012:	f7ff fdb9 	bl	8001b88 <W25qxx_BlockToPage>
 8002016:	8972      	ldrh	r2, [r6, #10]
 8002018:	fbb9 f4f2 	udiv	r4, r9, r2
 800201c:	eb04 0800 	add.w	r8, r4, r0

	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8002020:	fb02 9414 	mls	r4, r2, r4, r9

	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8002024:	462b      	mov	r3, r5
 8002026:	4622      	mov	r2, r4
 8002028:	4641      	mov	r1, r8
 800202a:	4638      	mov	r0, r7
 800202c:	f7ff ff52 	bl	8001ed4 <W25qxx_WritePage>
		StartPage++;
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8002030:	8972      	ldrh	r2, [r6, #10]
		StartPage++;
 8002032:	f108 0801 	add.w	r8, r8, #1
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8002036:	1aab      	subs	r3, r5, r2
 8002038:	191d      	adds	r5, r3, r4
		//pBuffer += w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 800203a:	1b12      	subs	r2, r2, r4
		LocalOffset = 0;
 800203c:	2400      	movs	r4, #0
	}
	while(BytesToWrite > 0);
 800203e:	42a5      	cmp	r5, r4
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002040:	4417      	add	r7, r2
	while(BytesToWrite > 0);
 8002042:	dcef      	bgt.n	8002024 <W25qxx_WriteBlock+0x38>
}
 8002044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002048:	462b      	mov	r3, r5
 800204a:	e7da      	b.n	8002002 <W25qxx_WriteBlock+0x16>
 800204c:	20000174 	.word	0x20000174

08002050 <W25qxx_ReadByte>:

//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(w25qxx.Lock==1)
 8002052:	4d1b      	ldr	r5, [pc, #108]	; (80020c0 <W25qxx_ReadByte+0x70>)
{
 8002054:	4607      	mov	r7, r0
 8002056:	460c      	mov	r4, r1
 8002058:	462e      	mov	r6, r5
	while(w25qxx.Lock==1)
 800205a:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 800205e:	2801      	cmp	r0, #1
 8002060:	d02b      	beq.n	80020ba <W25qxx_ReadByte+0x6a>
		W25qxx_Delay(1);

	w25qxx.Lock=1;
 8002062:	2301      	movs	r3, #1

	W25QFLASH_CS_SELECT;
 8002064:	2200      	movs	r2, #0
 8002066:	2102      	movs	r1, #2
 8002068:	4816      	ldr	r0, [pc, #88]	; (80020c4 <W25qxx_ReadByte+0x74>)
	w25qxx.Lock=1;
 800206a:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	W25QFLASH_CS_SELECT;
 800206e:	f7fe fa0d 	bl	800048c <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_FAST_READ);
 8002072:	200b      	movs	r0, #11
 8002074:	f7ff faf0 	bl	8001658 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8002078:	782b      	ldrb	r3, [r5, #0]
 800207a:	2b08      	cmp	r3, #8
 800207c:	d902      	bls.n	8002084 <W25qxx_ReadByte+0x34>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 800207e:	0e20      	lsrs	r0, r4, #24
 8002080:	f7ff faea 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 8002084:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002088:	f7ff fae6 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address& 0xFF00) >> 8);
 800208c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002090:	f7ff fae2 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 8002094:	b2e0      	uxtb	r0, r4
 8002096:	f7ff fadf 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(0);
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff fadc 	bl	8001658 <W25qxx_Spi>

	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020a0:	20a5      	movs	r0, #165	; 0xa5
 80020a2:	f7ff fad9 	bl	8001658 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 80020a6:	2201      	movs	r2, #1
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020a8:	7038      	strb	r0, [r7, #0]
	W25QFLASH_CS_UNSELECT;
 80020aa:	2102      	movs	r1, #2
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <W25qxx_ReadByte+0x74>)
 80020ae:	f7fe f9ed 	bl	800048c <HAL_GPIO_WritePin>

	w25qxx.Lock = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 80020b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		W25qxx_Delay(1);
 80020ba:	f7fe f897 	bl	80001ec <HAL_Delay>
 80020be:	e7cc      	b.n	800205a <W25qxx_ReadByte+0xa>
 80020c0:	20000174 	.word	0x20000174
 80020c4:	40010800 	.word	0x40010800

080020c8 <W25qxx_ReadBytes>:
}

//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while(w25qxx.Lock == 1)
 80020cc:	4d1f      	ldr	r5, [pc, #124]	; (800214c <W25qxx_ReadBytes+0x84>)
{
 80020ce:	4607      	mov	r7, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	4690      	mov	r8, r2
 80020d4:	462e      	mov	r6, r5
	while(w25qxx.Lock == 1)
 80020d6:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 80020da:	2801      	cmp	r0, #1
 80020dc:	d033      	beq.n	8002146 <W25qxx_ReadBytes+0x7e>
	W25qxx_Delay(1);

	w25qxx.Lock = 1;
 80020de:	2301      	movs	r3, #1

	W25QFLASH_CS_SELECT;
 80020e0:	2200      	movs	r2, #0
 80020e2:	2102      	movs	r1, #2
 80020e4:	481a      	ldr	r0, [pc, #104]	; (8002150 <W25qxx_ReadBytes+0x88>)
	w25qxx.Lock = 1;
 80020e6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	W25QFLASH_CS_SELECT;
 80020ea:	f7fe f9cf 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 80020ee:	200b      	movs	r0, #11
 80020f0:	f7ff fab2 	bl	8001658 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 80020f4:	782b      	ldrb	r3, [r5, #0]
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d902      	bls.n	8002100 <W25qxx_ReadBytes+0x38>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 80020fa:	0e20      	lsrs	r0, r4, #24
 80020fc:	f7ff faac 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8002100:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002104:	f7ff faa8 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8002108:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800210c:	f7ff faa4 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8002110:	b2e0      	uxtb	r0, r4
 8002112:	f7ff faa1 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(0);
 8002116:	2000      	movs	r0, #0
 8002118:	f7ff fa9e 	bl	8001658 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead, 2000);
 800211c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002120:	fa1f f288 	uxth.w	r2, r8
 8002124:	4639      	mov	r1, r7
 8002126:	480b      	ldr	r0, [pc, #44]	; (8002154 <W25qxx_ReadBytes+0x8c>)
 8002128:	f7fe fe92 	bl	8000e50 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead--;
	}*/

	W25QFLASH_CS_UNSELECT;
 800212c:	2201      	movs	r2, #1
 800212e:	2102      	movs	r1, #2
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <W25qxx_ReadBytes+0x88>)
 8002132:	f7fe f9ab 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f7fe f858 	bl	80001ec <HAL_Delay>
	w25qxx.Lock = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 8002142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	W25qxx_Delay(1);
 8002146:	f7fe f851 	bl	80001ec <HAL_Delay>
 800214a:	e7c4      	b.n	80020d6 <W25qxx_ReadBytes+0xe>
 800214c:	20000174 	.word	0x20000174
 8002150:	40010800 	.word	0x40010800
 8002154:	200000dc 	.word	0x200000dc

08002158 <W25qxx_ReadPage>:
}

//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8002158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while(w25qxx.Lock==1)
 800215c:	4e27      	ldr	r6, [pc, #156]	; (80021fc <W25qxx_ReadPage+0xa4>)
{
 800215e:	4680      	mov	r8, r0
 8002160:	4689      	mov	r9, r1
 8002162:	4614      	mov	r4, r2
 8002164:	461d      	mov	r5, r3
 8002166:	4637      	mov	r7, r6
	while(w25qxx.Lock==1)
 8002168:	f896 0027 	ldrb.w	r0, [r6, #39]	; 0x27
 800216c:	2801      	cmp	r0, #1
 800216e:	d03f      	beq.n	80021f0 <W25qxx_ReadPage+0x98>
		W25qxx_Delay(1);

	w25qxx.Lock = 1;
 8002170:	2301      	movs	r3, #1
 8002172:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27

	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize) || (NumByteToRead_up_to_PageSize==0))
 8002176:	8973      	ldrh	r3, [r6, #10]
 8002178:	42ab      	cmp	r3, r5
 800217a:	d33c      	bcc.n	80021f6 <W25qxx_ReadPage+0x9e>
 800217c:	2d00      	cmp	r5, #0
 800217e:	bf08      	it	eq
 8002180:	461d      	moveq	r5, r3
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;

	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002182:	192a      	adds	r2, r5, r4
 8002184:	4293      	cmp	r3, r2
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;

	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
	W25QFLASH_CS_SELECT;
 8002186:	f04f 0102 	mov.w	r1, #2
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	481c      	ldr	r0, [pc, #112]	; (8002200 <W25qxx_ReadPage+0xa8>)
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002190:	bf38      	it	cc
 8002192:	1b1d      	subcc	r5, r3, r4
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002194:	fb09 4403 	mla	r4, r9, r3, r4
	W25QFLASH_CS_SELECT;
 8002198:	f7fe f978 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 800219c:	200b      	movs	r0, #11
 800219e:	f7ff fa5b 	bl	8001658 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 80021a2:	783b      	ldrb	r3, [r7, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d902      	bls.n	80021ae <W25qxx_ReadPage+0x56>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80021a8:	0e20      	lsrs	r0, r4, #24
 80021aa:	f7ff fa55 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80021ae:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80021b2:	f7ff fa51 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 80021b6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80021ba:	f7ff fa4d 	bl	8001658 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80021be:	b2e0      	uxtb	r0, r4
 80021c0:	f7ff fa4a 	bl	8001658 <W25qxx_Spi>

	W25qxx_Spi(0);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fa47 	bl	8001658 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80021ca:	2364      	movs	r3, #100	; 0x64
 80021cc:	b2aa      	uxth	r2, r5
 80021ce:	4641      	mov	r1, r8
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <W25qxx_ReadPage+0xac>)
 80021d2:	f7fe fe3d 	bl	8000e50 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead_up_to_PageSize--;
	}*/

	W25QFLASH_CS_UNSELECT;
 80021d6:	2201      	movs	r2, #1
 80021d8:	2102      	movs	r1, #2
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <W25qxx_ReadPage+0xa8>)
 80021dc:	f7fe f956 	bl	800048c <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7fe f803 	bl	80001ec <HAL_Delay>
	w25qxx.Lock=0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		W25qxx_Delay(1);
 80021f0:	f7fd fffc 	bl	80001ec <HAL_Delay>
 80021f4:	e7b8      	b.n	8002168 <W25qxx_ReadPage+0x10>
 80021f6:	461d      	mov	r5, r3
 80021f8:	e7c3      	b.n	8002182 <W25qxx_ReadPage+0x2a>
 80021fa:	bf00      	nop
 80021fc:	20000174 	.word	0x20000174
 8002200:	40010800 	.word	0x40010800
 8002204:	200000dc 	.word	0x200000dc

08002208 <W25qxx_ReadSector>:
}

//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8002208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize==0))
 800220c:	4e16      	ldr	r6, [pc, #88]	; (8002268 <W25qxx_ReadSector+0x60>)
{	
 800220e:	4607      	mov	r7, r0
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize==0))
 8002210:	6935      	ldr	r5, [r6, #16]
{	
 8002212:	4691      	mov	r9, r2
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize==0))
 8002214:	429d      	cmp	r5, r3
 8002216:	d325      	bcc.n	8002264 <W25qxx_ReadSector+0x5c>
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf08      	it	eq
 800221c:	462b      	moveq	r3, r5

	uint32_t StartPage;
	int32_t	BytesToRead;
	uint32_t LocalOffset;

	if((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800221e:	eb03 0209 	add.w	r2, r3, r9
 8002222:	4295      	cmp	r5, r2
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	

	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002224:	4608      	mov	r0, r1
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8002226:	bf34      	ite	cc
 8002228:	eba5 0509 	subcc.w	r5, r5, r9
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 800222c:	461d      	movcs	r5, r3
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800222e:	f7ff fca1 	bl	8001b74 <W25qxx_SectorToPage>
 8002232:	8972      	ldrh	r2, [r6, #10]
 8002234:	fbb9 f4f2 	udiv	r4, r9, r2
 8002238:	eb04 0800 	add.w	r8, r4, r0

	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800223c:	fb02 9414 	mls	r4, r2, r4, r9

	do
	{		
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8002240:	462b      	mov	r3, r5
 8002242:	4622      	mov	r2, r4
 8002244:	4641      	mov	r1, r8
 8002246:	4638      	mov	r0, r7
 8002248:	f7ff ff86 	bl	8002158 <W25qxx_ReadPage>
		StartPage++;
		BytesToRead -= w25qxx.PageSize-LocalOffset;
 800224c:	8972      	ldrh	r2, [r6, #10]
		StartPage++;
 800224e:	f108 0801 	add.w	r8, r8, #1
		BytesToRead -= w25qxx.PageSize-LocalOffset;
 8002252:	1aab      	subs	r3, r5, r2
 8002254:	191d      	adds	r5, r3, r4
		//pBuffer+=w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002256:	1b12      	subs	r2, r2, r4
		LocalOffset = 0;
 8002258:	2400      	movs	r4, #0
	}
	while(BytesToRead > 0);
 800225a:	42a5      	cmp	r5, r4
		pBuffer += w25qxx.PageSize - LocalOffset;
 800225c:	4417      	add	r7, r2
	while(BytesToRead > 0);
 800225e:	dcef      	bgt.n	8002240 <W25qxx_ReadSector+0x38>
}
 8002260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002264:	462b      	mov	r3, r5
 8002266:	e7da      	b.n	800221e <W25qxx_ReadSector+0x16>
 8002268:	20000174 	.word	0x20000174

0800226c <W25qxx_ReadBlock>:

//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t	NumByteToRead_up_to_BlockSize)
{
 800226c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 8002270:	4e16      	ldr	r6, [pc, #88]	; (80022cc <W25qxx_ReadBlock+0x60>)
{
 8002272:	4607      	mov	r7, r0
	if((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 8002274:	69b5      	ldr	r5, [r6, #24]
{
 8002276:	4691      	mov	r9, r2
	if((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 8002278:	429d      	cmp	r5, r3
 800227a:	d325      	bcc.n	80022c8 <W25qxx_ReadBlock+0x5c>
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf08      	it	eq
 8002280:	462b      	moveq	r3, r5

	uint32_t StartPage;
	int32_t	BytesToRead;
	uint32_t LocalOffset;

	if((OffsetInByte+NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 8002282:	eb03 0209 	add.w	r2, r3, r9
 8002286:	4295      	cmp	r5, r2
		BytesToRead = w25qxx.BlockSize-OffsetInByte;
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;

	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 8002288:	4608      	mov	r0, r1
		BytesToRead = w25qxx.BlockSize-OffsetInByte;
 800228a:	bf34      	ite	cc
 800228c:	eba5 0509 	subcc.w	r5, r5, r9
		BytesToRead = NumByteToRead_up_to_BlockSize;
 8002290:	461d      	movcs	r5, r3
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 8002292:	f7ff fc79 	bl	8001b88 <W25qxx_BlockToPage>
 8002296:	8972      	ldrh	r2, [r6, #10]
 8002298:	fbb9 f4f2 	udiv	r4, r9, r2
 800229c:	eb04 0800 	add.w	r8, r4, r0

	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 80022a0:	fb02 9414 	mls	r4, r2, r4, r9

	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 80022a4:	462b      	mov	r3, r5
 80022a6:	4622      	mov	r2, r4
 80022a8:	4641      	mov	r1, r8
 80022aa:	4638      	mov	r0, r7
 80022ac:	f7ff ff54 	bl	8002158 <W25qxx_ReadPage>
		StartPage++;
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 80022b0:	8972      	ldrh	r2, [r6, #10]
		StartPage++;
 80022b2:	f108 0801 	add.w	r8, r8, #1
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 80022b6:	1aab      	subs	r3, r5, r2
 80022b8:	191d      	adds	r5, r3, r4
		//pBuffer+=w25qxx.PageSize;
		pBuffer += w25qxx.PageSize - LocalOffset;
 80022ba:	1b12      	subs	r2, r2, r4
		LocalOffset=0;
 80022bc:	2400      	movs	r4, #0
	}
	while(BytesToRead > 0);
 80022be:	42a5      	cmp	r5, r4
		pBuffer += w25qxx.PageSize - LocalOffset;
 80022c0:	4417      	add	r7, r2
	while(BytesToRead > 0);
 80022c2:	dcef      	bgt.n	80022a4 <W25qxx_ReadBlock+0x38>
}
 80022c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022c8:	462b      	mov	r3, r5
 80022ca:	e7da      	b.n	8002282 <W25qxx_ReadBlock+0x16>
 80022cc:	20000174 	.word	0x20000174

080022d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022d2:	e003      	b.n	80022dc <LoopCopyDataInit>

080022d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022da:	3104      	adds	r1, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022e4:	d3f6      	bcc.n	80022d4 <CopyDataInit>
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022e8:	e002      	b.n	80022f0 <LoopFillZerobss>

080022ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022ec:	f842 3b04 	str.w	r3, [r2], #4

080022f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022f4:	d3f9      	bcc.n	80022ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022f6:	f7ff f989 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f000 f815 	bl	8002328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fe:	f7fe ff55 	bl	80011ac <main>
  bx lr
 8002302:	4770      	bx	lr
  ldr r3, =_sidata
 8002304:	08002e84 	.word	0x08002e84
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800230c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002310:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002314:	200001a0 	.word	0x200001a0

08002318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC1_2_IRQHandler>
	...

0800231c <__errno>:
 800231c:	4b01      	ldr	r3, [pc, #4]	; (8002324 <__errno+0x8>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	2000000c 	.word	0x2000000c

08002328 <__libc_init_array>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2500      	movs	r5, #0
 800232c:	4e0c      	ldr	r6, [pc, #48]	; (8002360 <__libc_init_array+0x38>)
 800232e:	4c0d      	ldr	r4, [pc, #52]	; (8002364 <__libc_init_array+0x3c>)
 8002330:	1ba4      	subs	r4, r4, r6
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	42a5      	cmp	r5, r4
 8002336:	d109      	bne.n	800234c <__libc_init_array+0x24>
 8002338:	f000 fc5e 	bl	8002bf8 <_init>
 800233c:	2500      	movs	r5, #0
 800233e:	4e0a      	ldr	r6, [pc, #40]	; (8002368 <__libc_init_array+0x40>)
 8002340:	4c0a      	ldr	r4, [pc, #40]	; (800236c <__libc_init_array+0x44>)
 8002342:	1ba4      	subs	r4, r4, r6
 8002344:	10a4      	asrs	r4, r4, #2
 8002346:	42a5      	cmp	r5, r4
 8002348:	d105      	bne.n	8002356 <__libc_init_array+0x2e>
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002350:	4798      	blx	r3
 8002352:	3501      	adds	r5, #1
 8002354:	e7ee      	b.n	8002334 <__libc_init_array+0xc>
 8002356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800235a:	4798      	blx	r3
 800235c:	3501      	adds	r5, #1
 800235e:	e7f2      	b.n	8002346 <__libc_init_array+0x1e>
 8002360:	08002e7c 	.word	0x08002e7c
 8002364:	08002e7c 	.word	0x08002e7c
 8002368:	08002e7c 	.word	0x08002e7c
 800236c:	08002e80 	.word	0x08002e80

08002370 <memset>:
 8002370:	4603      	mov	r3, r0
 8002372:	4402      	add	r2, r0
 8002374:	4293      	cmp	r3, r2
 8002376:	d100      	bne.n	800237a <memset+0xa>
 8002378:	4770      	bx	lr
 800237a:	f803 1b01 	strb.w	r1, [r3], #1
 800237e:	e7f9      	b.n	8002374 <memset+0x4>

08002380 <sniprintf>:
 8002380:	b40c      	push	{r2, r3}
 8002382:	b530      	push	{r4, r5, lr}
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <sniprintf+0x64>)
 8002386:	1e0c      	subs	r4, r1, #0
 8002388:	b09d      	sub	sp, #116	; 0x74
 800238a:	681d      	ldr	r5, [r3, #0]
 800238c:	da08      	bge.n	80023a0 <sniprintf+0x20>
 800238e:	238b      	movs	r3, #139	; 0x8b
 8002390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	b01d      	add	sp, #116	; 0x74
 8002398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800239c:	b002      	add	sp, #8
 800239e:	4770      	bx	lr
 80023a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80023a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80023a8:	bf0c      	ite	eq
 80023aa:	4623      	moveq	r3, r4
 80023ac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80023b0:	9304      	str	r3, [sp, #16]
 80023b2:	9307      	str	r3, [sp, #28]
 80023b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b8:	9002      	str	r0, [sp, #8]
 80023ba:	9006      	str	r0, [sp, #24]
 80023bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80023c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80023c2:	ab21      	add	r3, sp, #132	; 0x84
 80023c4:	a902      	add	r1, sp, #8
 80023c6:	4628      	mov	r0, r5
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	f000 f869 	bl	80024a0 <_svfiprintf_r>
 80023ce:	1c43      	adds	r3, r0, #1
 80023d0:	bfbc      	itt	lt
 80023d2:	238b      	movlt	r3, #139	; 0x8b
 80023d4:	602b      	strlt	r3, [r5, #0]
 80023d6:	2c00      	cmp	r4, #0
 80023d8:	d0dd      	beq.n	8002396 <sniprintf+0x16>
 80023da:	2200      	movs	r2, #0
 80023dc:	9b02      	ldr	r3, [sp, #8]
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e7d9      	b.n	8002396 <sniprintf+0x16>
 80023e2:	bf00      	nop
 80023e4:	2000000c 	.word	0x2000000c

080023e8 <__ssputs_r>:
 80023e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023ec:	688e      	ldr	r6, [r1, #8]
 80023ee:	4682      	mov	sl, r0
 80023f0:	429e      	cmp	r6, r3
 80023f2:	460c      	mov	r4, r1
 80023f4:	4691      	mov	r9, r2
 80023f6:	4698      	mov	r8, r3
 80023f8:	d835      	bhi.n	8002466 <__ssputs_r+0x7e>
 80023fa:	898a      	ldrh	r2, [r1, #12]
 80023fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002400:	d031      	beq.n	8002466 <__ssputs_r+0x7e>
 8002402:	2302      	movs	r3, #2
 8002404:	6825      	ldr	r5, [r4, #0]
 8002406:	6909      	ldr	r1, [r1, #16]
 8002408:	1a6f      	subs	r7, r5, r1
 800240a:	6965      	ldr	r5, [r4, #20]
 800240c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002410:	fb95 f5f3 	sdiv	r5, r5, r3
 8002414:	f108 0301 	add.w	r3, r8, #1
 8002418:	443b      	add	r3, r7
 800241a:	429d      	cmp	r5, r3
 800241c:	bf38      	it	cc
 800241e:	461d      	movcc	r5, r3
 8002420:	0553      	lsls	r3, r2, #21
 8002422:	d531      	bpl.n	8002488 <__ssputs_r+0xa0>
 8002424:	4629      	mov	r1, r5
 8002426:	f000 fb47 	bl	8002ab8 <_malloc_r>
 800242a:	4606      	mov	r6, r0
 800242c:	b950      	cbnz	r0, 8002444 <__ssputs_r+0x5c>
 800242e:	230c      	movs	r3, #12
 8002430:	f8ca 3000 	str.w	r3, [sl]
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800243a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243e:	81a3      	strh	r3, [r4, #12]
 8002440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002444:	463a      	mov	r2, r7
 8002446:	6921      	ldr	r1, [r4, #16]
 8002448:	f000 fac4 	bl	80029d4 <memcpy>
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	81a3      	strh	r3, [r4, #12]
 8002458:	6126      	str	r6, [r4, #16]
 800245a:	443e      	add	r6, r7
 800245c:	6026      	str	r6, [r4, #0]
 800245e:	4646      	mov	r6, r8
 8002460:	6165      	str	r5, [r4, #20]
 8002462:	1bed      	subs	r5, r5, r7
 8002464:	60a5      	str	r5, [r4, #8]
 8002466:	4546      	cmp	r6, r8
 8002468:	bf28      	it	cs
 800246a:	4646      	movcs	r6, r8
 800246c:	4649      	mov	r1, r9
 800246e:	4632      	mov	r2, r6
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	f000 faba 	bl	80029ea <memmove>
 8002476:	68a3      	ldr	r3, [r4, #8]
 8002478:	2000      	movs	r0, #0
 800247a:	1b9b      	subs	r3, r3, r6
 800247c:	60a3      	str	r3, [r4, #8]
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	441e      	add	r6, r3
 8002482:	6026      	str	r6, [r4, #0]
 8002484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002488:	462a      	mov	r2, r5
 800248a:	f000 fb73 	bl	8002b74 <_realloc_r>
 800248e:	4606      	mov	r6, r0
 8002490:	2800      	cmp	r0, #0
 8002492:	d1e1      	bne.n	8002458 <__ssputs_r+0x70>
 8002494:	6921      	ldr	r1, [r4, #16]
 8002496:	4650      	mov	r0, sl
 8002498:	f000 fac2 	bl	8002a20 <_free_r>
 800249c:	e7c7      	b.n	800242e <__ssputs_r+0x46>
	...

080024a0 <_svfiprintf_r>:
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a4:	b09d      	sub	sp, #116	; 0x74
 80024a6:	9303      	str	r3, [sp, #12]
 80024a8:	898b      	ldrh	r3, [r1, #12]
 80024aa:	4680      	mov	r8, r0
 80024ac:	061c      	lsls	r4, r3, #24
 80024ae:	460d      	mov	r5, r1
 80024b0:	4616      	mov	r6, r2
 80024b2:	d50f      	bpl.n	80024d4 <_svfiprintf_r+0x34>
 80024b4:	690b      	ldr	r3, [r1, #16]
 80024b6:	b96b      	cbnz	r3, 80024d4 <_svfiprintf_r+0x34>
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	f000 fafd 	bl	8002ab8 <_malloc_r>
 80024be:	6028      	str	r0, [r5, #0]
 80024c0:	6128      	str	r0, [r5, #16]
 80024c2:	b928      	cbnz	r0, 80024d0 <_svfiprintf_r+0x30>
 80024c4:	230c      	movs	r3, #12
 80024c6:	f8c8 3000 	str.w	r3, [r8]
 80024ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ce:	e0c4      	b.n	800265a <_svfiprintf_r+0x1ba>
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	616b      	str	r3, [r5, #20]
 80024d4:	2300      	movs	r3, #0
 80024d6:	9309      	str	r3, [sp, #36]	; 0x24
 80024d8:	2320      	movs	r3, #32
 80024da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024de:	2330      	movs	r3, #48	; 0x30
 80024e0:	f04f 0b01 	mov.w	fp, #1
 80024e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024e8:	4637      	mov	r7, r6
 80024ea:	463c      	mov	r4, r7
 80024ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d13c      	bne.n	800256e <_svfiprintf_r+0xce>
 80024f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80024f8:	d00b      	beq.n	8002512 <_svfiprintf_r+0x72>
 80024fa:	4653      	mov	r3, sl
 80024fc:	4632      	mov	r2, r6
 80024fe:	4629      	mov	r1, r5
 8002500:	4640      	mov	r0, r8
 8002502:	f7ff ff71 	bl	80023e8 <__ssputs_r>
 8002506:	3001      	adds	r0, #1
 8002508:	f000 80a2 	beq.w	8002650 <_svfiprintf_r+0x1b0>
 800250c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800250e:	4453      	add	r3, sl
 8002510:	9309      	str	r3, [sp, #36]	; 0x24
 8002512:	783b      	ldrb	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 809b 	beq.w	8002650 <_svfiprintf_r+0x1b0>
 800251a:	2300      	movs	r3, #0
 800251c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002520:	9304      	str	r3, [sp, #16]
 8002522:	9307      	str	r3, [sp, #28]
 8002524:	9205      	str	r2, [sp, #20]
 8002526:	9306      	str	r3, [sp, #24]
 8002528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800252c:	931a      	str	r3, [sp, #104]	; 0x68
 800252e:	2205      	movs	r2, #5
 8002530:	7821      	ldrb	r1, [r4, #0]
 8002532:	4850      	ldr	r0, [pc, #320]	; (8002674 <_svfiprintf_r+0x1d4>)
 8002534:	f000 fa40 	bl	80029b8 <memchr>
 8002538:	1c67      	adds	r7, r4, #1
 800253a:	9b04      	ldr	r3, [sp, #16]
 800253c:	b9d8      	cbnz	r0, 8002576 <_svfiprintf_r+0xd6>
 800253e:	06d9      	lsls	r1, r3, #27
 8002540:	bf44      	itt	mi
 8002542:	2220      	movmi	r2, #32
 8002544:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002548:	071a      	lsls	r2, r3, #28
 800254a:	bf44      	itt	mi
 800254c:	222b      	movmi	r2, #43	; 0x2b
 800254e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002552:	7822      	ldrb	r2, [r4, #0]
 8002554:	2a2a      	cmp	r2, #42	; 0x2a
 8002556:	d016      	beq.n	8002586 <_svfiprintf_r+0xe6>
 8002558:	2100      	movs	r1, #0
 800255a:	200a      	movs	r0, #10
 800255c:	9a07      	ldr	r2, [sp, #28]
 800255e:	4627      	mov	r7, r4
 8002560:	783b      	ldrb	r3, [r7, #0]
 8002562:	3401      	adds	r4, #1
 8002564:	3b30      	subs	r3, #48	; 0x30
 8002566:	2b09      	cmp	r3, #9
 8002568:	d950      	bls.n	800260c <_svfiprintf_r+0x16c>
 800256a:	b1c9      	cbz	r1, 80025a0 <_svfiprintf_r+0x100>
 800256c:	e011      	b.n	8002592 <_svfiprintf_r+0xf2>
 800256e:	2b25      	cmp	r3, #37	; 0x25
 8002570:	d0c0      	beq.n	80024f4 <_svfiprintf_r+0x54>
 8002572:	4627      	mov	r7, r4
 8002574:	e7b9      	b.n	80024ea <_svfiprintf_r+0x4a>
 8002576:	4a3f      	ldr	r2, [pc, #252]	; (8002674 <_svfiprintf_r+0x1d4>)
 8002578:	463c      	mov	r4, r7
 800257a:	1a80      	subs	r0, r0, r2
 800257c:	fa0b f000 	lsl.w	r0, fp, r0
 8002580:	4318      	orrs	r0, r3
 8002582:	9004      	str	r0, [sp, #16]
 8002584:	e7d3      	b.n	800252e <_svfiprintf_r+0x8e>
 8002586:	9a03      	ldr	r2, [sp, #12]
 8002588:	1d11      	adds	r1, r2, #4
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	9103      	str	r1, [sp, #12]
 800258e:	2a00      	cmp	r2, #0
 8002590:	db01      	blt.n	8002596 <_svfiprintf_r+0xf6>
 8002592:	9207      	str	r2, [sp, #28]
 8002594:	e004      	b.n	80025a0 <_svfiprintf_r+0x100>
 8002596:	4252      	negs	r2, r2
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	9207      	str	r2, [sp, #28]
 800259e:	9304      	str	r3, [sp, #16]
 80025a0:	783b      	ldrb	r3, [r7, #0]
 80025a2:	2b2e      	cmp	r3, #46	; 0x2e
 80025a4:	d10d      	bne.n	80025c2 <_svfiprintf_r+0x122>
 80025a6:	787b      	ldrb	r3, [r7, #1]
 80025a8:	1c79      	adds	r1, r7, #1
 80025aa:	2b2a      	cmp	r3, #42	; 0x2a
 80025ac:	d132      	bne.n	8002614 <_svfiprintf_r+0x174>
 80025ae:	9b03      	ldr	r3, [sp, #12]
 80025b0:	3702      	adds	r7, #2
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	9203      	str	r2, [sp, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bfb8      	it	lt
 80025bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80025c0:	9305      	str	r3, [sp, #20]
 80025c2:	4c2d      	ldr	r4, [pc, #180]	; (8002678 <_svfiprintf_r+0x1d8>)
 80025c4:	2203      	movs	r2, #3
 80025c6:	7839      	ldrb	r1, [r7, #0]
 80025c8:	4620      	mov	r0, r4
 80025ca:	f000 f9f5 	bl	80029b8 <memchr>
 80025ce:	b138      	cbz	r0, 80025e0 <_svfiprintf_r+0x140>
 80025d0:	2340      	movs	r3, #64	; 0x40
 80025d2:	1b00      	subs	r0, r0, r4
 80025d4:	fa03 f000 	lsl.w	r0, r3, r0
 80025d8:	9b04      	ldr	r3, [sp, #16]
 80025da:	3701      	adds	r7, #1
 80025dc:	4303      	orrs	r3, r0
 80025de:	9304      	str	r3, [sp, #16]
 80025e0:	7839      	ldrb	r1, [r7, #0]
 80025e2:	2206      	movs	r2, #6
 80025e4:	4825      	ldr	r0, [pc, #148]	; (800267c <_svfiprintf_r+0x1dc>)
 80025e6:	1c7e      	adds	r6, r7, #1
 80025e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025ec:	f000 f9e4 	bl	80029b8 <memchr>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d035      	beq.n	8002660 <_svfiprintf_r+0x1c0>
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <_svfiprintf_r+0x1e0>)
 80025f6:	b9fb      	cbnz	r3, 8002638 <_svfiprintf_r+0x198>
 80025f8:	9b03      	ldr	r3, [sp, #12]
 80025fa:	3307      	adds	r3, #7
 80025fc:	f023 0307 	bic.w	r3, r3, #7
 8002600:	3308      	adds	r3, #8
 8002602:	9303      	str	r3, [sp, #12]
 8002604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002606:	444b      	add	r3, r9
 8002608:	9309      	str	r3, [sp, #36]	; 0x24
 800260a:	e76d      	b.n	80024e8 <_svfiprintf_r+0x48>
 800260c:	fb00 3202 	mla	r2, r0, r2, r3
 8002610:	2101      	movs	r1, #1
 8002612:	e7a4      	b.n	800255e <_svfiprintf_r+0xbe>
 8002614:	2300      	movs	r3, #0
 8002616:	240a      	movs	r4, #10
 8002618:	4618      	mov	r0, r3
 800261a:	9305      	str	r3, [sp, #20]
 800261c:	460f      	mov	r7, r1
 800261e:	783a      	ldrb	r2, [r7, #0]
 8002620:	3101      	adds	r1, #1
 8002622:	3a30      	subs	r2, #48	; 0x30
 8002624:	2a09      	cmp	r2, #9
 8002626:	d903      	bls.n	8002630 <_svfiprintf_r+0x190>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ca      	beq.n	80025c2 <_svfiprintf_r+0x122>
 800262c:	9005      	str	r0, [sp, #20]
 800262e:	e7c8      	b.n	80025c2 <_svfiprintf_r+0x122>
 8002630:	fb04 2000 	mla	r0, r4, r0, r2
 8002634:	2301      	movs	r3, #1
 8002636:	e7f1      	b.n	800261c <_svfiprintf_r+0x17c>
 8002638:	ab03      	add	r3, sp, #12
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	462a      	mov	r2, r5
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <_svfiprintf_r+0x1e4>)
 8002640:	a904      	add	r1, sp, #16
 8002642:	4640      	mov	r0, r8
 8002644:	f3af 8000 	nop.w
 8002648:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800264c:	4681      	mov	r9, r0
 800264e:	d1d9      	bne.n	8002604 <_svfiprintf_r+0x164>
 8002650:	89ab      	ldrh	r3, [r5, #12]
 8002652:	065b      	lsls	r3, r3, #25
 8002654:	f53f af39 	bmi.w	80024ca <_svfiprintf_r+0x2a>
 8002658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800265a:	b01d      	add	sp, #116	; 0x74
 800265c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002660:	ab03      	add	r3, sp, #12
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	462a      	mov	r2, r5
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <_svfiprintf_r+0x1e4>)
 8002668:	a904      	add	r1, sp, #16
 800266a:	4640      	mov	r0, r8
 800266c:	f000 f884 	bl	8002778 <_printf_i>
 8002670:	e7ea      	b.n	8002648 <_svfiprintf_r+0x1a8>
 8002672:	bf00      	nop
 8002674:	08002e47 	.word	0x08002e47
 8002678:	08002e4d 	.word	0x08002e4d
 800267c:	08002e51 	.word	0x08002e51
 8002680:	00000000 	.word	0x00000000
 8002684:	080023e9 	.word	0x080023e9

08002688 <_printf_common>:
 8002688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800268c:	4691      	mov	r9, r2
 800268e:	461f      	mov	r7, r3
 8002690:	688a      	ldr	r2, [r1, #8]
 8002692:	690b      	ldr	r3, [r1, #16]
 8002694:	4606      	mov	r6, r0
 8002696:	4293      	cmp	r3, r2
 8002698:	bfb8      	it	lt
 800269a:	4613      	movlt	r3, r2
 800269c:	f8c9 3000 	str.w	r3, [r9]
 80026a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026a4:	460c      	mov	r4, r1
 80026a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026aa:	b112      	cbz	r2, 80026b2 <_printf_common+0x2a>
 80026ac:	3301      	adds	r3, #1
 80026ae:	f8c9 3000 	str.w	r3, [r9]
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	0699      	lsls	r1, r3, #26
 80026b6:	bf42      	ittt	mi
 80026b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026bc:	3302      	addmi	r3, #2
 80026be:	f8c9 3000 	strmi.w	r3, [r9]
 80026c2:	6825      	ldr	r5, [r4, #0]
 80026c4:	f015 0506 	ands.w	r5, r5, #6
 80026c8:	d107      	bne.n	80026da <_printf_common+0x52>
 80026ca:	f104 0a19 	add.w	sl, r4, #25
 80026ce:	68e3      	ldr	r3, [r4, #12]
 80026d0:	f8d9 2000 	ldr.w	r2, [r9]
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	429d      	cmp	r5, r3
 80026d8:	db2a      	blt.n	8002730 <_printf_common+0xa8>
 80026da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	3300      	adds	r3, #0
 80026e2:	bf18      	it	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	0692      	lsls	r2, r2, #26
 80026e8:	d42f      	bmi.n	800274a <_printf_common+0xc2>
 80026ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026ee:	4639      	mov	r1, r7
 80026f0:	4630      	mov	r0, r6
 80026f2:	47c0      	blx	r8
 80026f4:	3001      	adds	r0, #1
 80026f6:	d022      	beq.n	800273e <_printf_common+0xb6>
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	68e5      	ldr	r5, [r4, #12]
 80026fc:	f003 0306 	and.w	r3, r3, #6
 8002700:	2b04      	cmp	r3, #4
 8002702:	bf18      	it	ne
 8002704:	2500      	movne	r5, #0
 8002706:	f8d9 2000 	ldr.w	r2, [r9]
 800270a:	f04f 0900 	mov.w	r9, #0
 800270e:	bf08      	it	eq
 8002710:	1aad      	subeq	r5, r5, r2
 8002712:	68a3      	ldr	r3, [r4, #8]
 8002714:	6922      	ldr	r2, [r4, #16]
 8002716:	bf08      	it	eq
 8002718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800271c:	4293      	cmp	r3, r2
 800271e:	bfc4      	itt	gt
 8002720:	1a9b      	subgt	r3, r3, r2
 8002722:	18ed      	addgt	r5, r5, r3
 8002724:	341a      	adds	r4, #26
 8002726:	454d      	cmp	r5, r9
 8002728:	d11b      	bne.n	8002762 <_printf_common+0xda>
 800272a:	2000      	movs	r0, #0
 800272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002730:	2301      	movs	r3, #1
 8002732:	4652      	mov	r2, sl
 8002734:	4639      	mov	r1, r7
 8002736:	4630      	mov	r0, r6
 8002738:	47c0      	blx	r8
 800273a:	3001      	adds	r0, #1
 800273c:	d103      	bne.n	8002746 <_printf_common+0xbe>
 800273e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002746:	3501      	adds	r5, #1
 8002748:	e7c1      	b.n	80026ce <_printf_common+0x46>
 800274a:	2030      	movs	r0, #48	; 0x30
 800274c:	18e1      	adds	r1, r4, r3
 800274e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002758:	4422      	add	r2, r4
 800275a:	3302      	adds	r3, #2
 800275c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002760:	e7c3      	b.n	80026ea <_printf_common+0x62>
 8002762:	2301      	movs	r3, #1
 8002764:	4622      	mov	r2, r4
 8002766:	4639      	mov	r1, r7
 8002768:	4630      	mov	r0, r6
 800276a:	47c0      	blx	r8
 800276c:	3001      	adds	r0, #1
 800276e:	d0e6      	beq.n	800273e <_printf_common+0xb6>
 8002770:	f109 0901 	add.w	r9, r9, #1
 8002774:	e7d7      	b.n	8002726 <_printf_common+0x9e>
	...

08002778 <_printf_i>:
 8002778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800277c:	4617      	mov	r7, r2
 800277e:	7e0a      	ldrb	r2, [r1, #24]
 8002780:	b085      	sub	sp, #20
 8002782:	2a6e      	cmp	r2, #110	; 0x6e
 8002784:	4698      	mov	r8, r3
 8002786:	4606      	mov	r6, r0
 8002788:	460c      	mov	r4, r1
 800278a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800278c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002790:	f000 80bc 	beq.w	800290c <_printf_i+0x194>
 8002794:	d81a      	bhi.n	80027cc <_printf_i+0x54>
 8002796:	2a63      	cmp	r2, #99	; 0x63
 8002798:	d02e      	beq.n	80027f8 <_printf_i+0x80>
 800279a:	d80a      	bhi.n	80027b2 <_printf_i+0x3a>
 800279c:	2a00      	cmp	r2, #0
 800279e:	f000 80c8 	beq.w	8002932 <_printf_i+0x1ba>
 80027a2:	2a58      	cmp	r2, #88	; 0x58
 80027a4:	f000 808a 	beq.w	80028bc <_printf_i+0x144>
 80027a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80027b0:	e02a      	b.n	8002808 <_printf_i+0x90>
 80027b2:	2a64      	cmp	r2, #100	; 0x64
 80027b4:	d001      	beq.n	80027ba <_printf_i+0x42>
 80027b6:	2a69      	cmp	r2, #105	; 0x69
 80027b8:	d1f6      	bne.n	80027a8 <_printf_i+0x30>
 80027ba:	6821      	ldr	r1, [r4, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027c2:	d023      	beq.n	800280c <_printf_i+0x94>
 80027c4:	1d11      	adds	r1, r2, #4
 80027c6:	6019      	str	r1, [r3, #0]
 80027c8:	6813      	ldr	r3, [r2, #0]
 80027ca:	e027      	b.n	800281c <_printf_i+0xa4>
 80027cc:	2a73      	cmp	r2, #115	; 0x73
 80027ce:	f000 80b4 	beq.w	800293a <_printf_i+0x1c2>
 80027d2:	d808      	bhi.n	80027e6 <_printf_i+0x6e>
 80027d4:	2a6f      	cmp	r2, #111	; 0x6f
 80027d6:	d02a      	beq.n	800282e <_printf_i+0xb6>
 80027d8:	2a70      	cmp	r2, #112	; 0x70
 80027da:	d1e5      	bne.n	80027a8 <_printf_i+0x30>
 80027dc:	680a      	ldr	r2, [r1, #0]
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	600a      	str	r2, [r1, #0]
 80027e4:	e003      	b.n	80027ee <_printf_i+0x76>
 80027e6:	2a75      	cmp	r2, #117	; 0x75
 80027e8:	d021      	beq.n	800282e <_printf_i+0xb6>
 80027ea:	2a78      	cmp	r2, #120	; 0x78
 80027ec:	d1dc      	bne.n	80027a8 <_printf_i+0x30>
 80027ee:	2278      	movs	r2, #120	; 0x78
 80027f0:	496f      	ldr	r1, [pc, #444]	; (80029b0 <_printf_i+0x238>)
 80027f2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80027f6:	e064      	b.n	80028c2 <_printf_i+0x14a>
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80027fe:	1d11      	adds	r1, r2, #4
 8002800:	6019      	str	r1, [r3, #0]
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002808:	2301      	movs	r3, #1
 800280a:	e0a3      	b.n	8002954 <_printf_i+0x1dc>
 800280c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002810:	f102 0104 	add.w	r1, r2, #4
 8002814:	6019      	str	r1, [r3, #0]
 8002816:	d0d7      	beq.n	80027c8 <_printf_i+0x50>
 8002818:	f9b2 3000 	ldrsh.w	r3, [r2]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da03      	bge.n	8002828 <_printf_i+0xb0>
 8002820:	222d      	movs	r2, #45	; 0x2d
 8002822:	425b      	negs	r3, r3
 8002824:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002828:	4962      	ldr	r1, [pc, #392]	; (80029b4 <_printf_i+0x23c>)
 800282a:	220a      	movs	r2, #10
 800282c:	e017      	b.n	800285e <_printf_i+0xe6>
 800282e:	6820      	ldr	r0, [r4, #0]
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002836:	d003      	beq.n	8002840 <_printf_i+0xc8>
 8002838:	1d08      	adds	r0, r1, #4
 800283a:	6018      	str	r0, [r3, #0]
 800283c:	680b      	ldr	r3, [r1, #0]
 800283e:	e006      	b.n	800284e <_printf_i+0xd6>
 8002840:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002844:	f101 0004 	add.w	r0, r1, #4
 8002848:	6018      	str	r0, [r3, #0]
 800284a:	d0f7      	beq.n	800283c <_printf_i+0xc4>
 800284c:	880b      	ldrh	r3, [r1, #0]
 800284e:	2a6f      	cmp	r2, #111	; 0x6f
 8002850:	bf14      	ite	ne
 8002852:	220a      	movne	r2, #10
 8002854:	2208      	moveq	r2, #8
 8002856:	4957      	ldr	r1, [pc, #348]	; (80029b4 <_printf_i+0x23c>)
 8002858:	2000      	movs	r0, #0
 800285a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800285e:	6865      	ldr	r5, [r4, #4]
 8002860:	2d00      	cmp	r5, #0
 8002862:	60a5      	str	r5, [r4, #8]
 8002864:	f2c0 809c 	blt.w	80029a0 <_printf_i+0x228>
 8002868:	6820      	ldr	r0, [r4, #0]
 800286a:	f020 0004 	bic.w	r0, r0, #4
 800286e:	6020      	str	r0, [r4, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d13f      	bne.n	80028f4 <_printf_i+0x17c>
 8002874:	2d00      	cmp	r5, #0
 8002876:	f040 8095 	bne.w	80029a4 <_printf_i+0x22c>
 800287a:	4675      	mov	r5, lr
 800287c:	2a08      	cmp	r2, #8
 800287e:	d10b      	bne.n	8002898 <_printf_i+0x120>
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	07da      	lsls	r2, r3, #31
 8002884:	d508      	bpl.n	8002898 <_printf_i+0x120>
 8002886:	6923      	ldr	r3, [r4, #16]
 8002888:	6862      	ldr	r2, [r4, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	bfde      	ittt	le
 800288e:	2330      	movle	r3, #48	; 0x30
 8002890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002894:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002898:	ebae 0305 	sub.w	r3, lr, r5
 800289c:	6123      	str	r3, [r4, #16]
 800289e:	f8cd 8000 	str.w	r8, [sp]
 80028a2:	463b      	mov	r3, r7
 80028a4:	aa03      	add	r2, sp, #12
 80028a6:	4621      	mov	r1, r4
 80028a8:	4630      	mov	r0, r6
 80028aa:	f7ff feed 	bl	8002688 <_printf_common>
 80028ae:	3001      	adds	r0, #1
 80028b0:	d155      	bne.n	800295e <_printf_i+0x1e6>
 80028b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b6:	b005      	add	sp, #20
 80028b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80028c0:	493c      	ldr	r1, [pc, #240]	; (80029b4 <_printf_i+0x23c>)
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028ca:	f100 0504 	add.w	r5, r0, #4
 80028ce:	601d      	str	r5, [r3, #0]
 80028d0:	d001      	beq.n	80028d6 <_printf_i+0x15e>
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	e002      	b.n	80028dc <_printf_i+0x164>
 80028d6:	0655      	lsls	r5, r2, #25
 80028d8:	d5fb      	bpl.n	80028d2 <_printf_i+0x15a>
 80028da:	8803      	ldrh	r3, [r0, #0]
 80028dc:	07d0      	lsls	r0, r2, #31
 80028de:	bf44      	itt	mi
 80028e0:	f042 0220 	orrmi.w	r2, r2, #32
 80028e4:	6022      	strmi	r2, [r4, #0]
 80028e6:	b91b      	cbnz	r3, 80028f0 <_printf_i+0x178>
 80028e8:	6822      	ldr	r2, [r4, #0]
 80028ea:	f022 0220 	bic.w	r2, r2, #32
 80028ee:	6022      	str	r2, [r4, #0]
 80028f0:	2210      	movs	r2, #16
 80028f2:	e7b1      	b.n	8002858 <_printf_i+0xe0>
 80028f4:	4675      	mov	r5, lr
 80028f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80028fa:	fb02 3310 	mls	r3, r2, r0, r3
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002904:	4603      	mov	r3, r0
 8002906:	2800      	cmp	r0, #0
 8002908:	d1f5      	bne.n	80028f6 <_printf_i+0x17e>
 800290a:	e7b7      	b.n	800287c <_printf_i+0x104>
 800290c:	6808      	ldr	r0, [r1, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002914:	6949      	ldr	r1, [r1, #20]
 8002916:	d004      	beq.n	8002922 <_printf_i+0x1aa>
 8002918:	1d10      	adds	r0, r2, #4
 800291a:	6018      	str	r0, [r3, #0]
 800291c:	6813      	ldr	r3, [r2, #0]
 800291e:	6019      	str	r1, [r3, #0]
 8002920:	e007      	b.n	8002932 <_printf_i+0x1ba>
 8002922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002926:	f102 0004 	add.w	r0, r2, #4
 800292a:	6018      	str	r0, [r3, #0]
 800292c:	6813      	ldr	r3, [r2, #0]
 800292e:	d0f6      	beq.n	800291e <_printf_i+0x1a6>
 8002930:	8019      	strh	r1, [r3, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	4675      	mov	r5, lr
 8002936:	6123      	str	r3, [r4, #16]
 8002938:	e7b1      	b.n	800289e <_printf_i+0x126>
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	1d11      	adds	r1, r2, #4
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	6815      	ldr	r5, [r2, #0]
 8002942:	2100      	movs	r1, #0
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	4628      	mov	r0, r5
 8002948:	f000 f836 	bl	80029b8 <memchr>
 800294c:	b108      	cbz	r0, 8002952 <_printf_i+0x1da>
 800294e:	1b40      	subs	r0, r0, r5
 8002950:	6060      	str	r0, [r4, #4]
 8002952:	6863      	ldr	r3, [r4, #4]
 8002954:	6123      	str	r3, [r4, #16]
 8002956:	2300      	movs	r3, #0
 8002958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800295c:	e79f      	b.n	800289e <_printf_i+0x126>
 800295e:	6923      	ldr	r3, [r4, #16]
 8002960:	462a      	mov	r2, r5
 8002962:	4639      	mov	r1, r7
 8002964:	4630      	mov	r0, r6
 8002966:	47c0      	blx	r8
 8002968:	3001      	adds	r0, #1
 800296a:	d0a2      	beq.n	80028b2 <_printf_i+0x13a>
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	079b      	lsls	r3, r3, #30
 8002970:	d507      	bpl.n	8002982 <_printf_i+0x20a>
 8002972:	2500      	movs	r5, #0
 8002974:	f104 0919 	add.w	r9, r4, #25
 8002978:	68e3      	ldr	r3, [r4, #12]
 800297a:	9a03      	ldr	r2, [sp, #12]
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	429d      	cmp	r5, r3
 8002980:	db05      	blt.n	800298e <_printf_i+0x216>
 8002982:	68e0      	ldr	r0, [r4, #12]
 8002984:	9b03      	ldr	r3, [sp, #12]
 8002986:	4298      	cmp	r0, r3
 8002988:	bfb8      	it	lt
 800298a:	4618      	movlt	r0, r3
 800298c:	e793      	b.n	80028b6 <_printf_i+0x13e>
 800298e:	2301      	movs	r3, #1
 8002990:	464a      	mov	r2, r9
 8002992:	4639      	mov	r1, r7
 8002994:	4630      	mov	r0, r6
 8002996:	47c0      	blx	r8
 8002998:	3001      	adds	r0, #1
 800299a:	d08a      	beq.n	80028b2 <_printf_i+0x13a>
 800299c:	3501      	adds	r5, #1
 800299e:	e7eb      	b.n	8002978 <_printf_i+0x200>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1a7      	bne.n	80028f4 <_printf_i+0x17c>
 80029a4:	780b      	ldrb	r3, [r1, #0]
 80029a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ae:	e765      	b.n	800287c <_printf_i+0x104>
 80029b0:	08002e69 	.word	0x08002e69
 80029b4:	08002e58 	.word	0x08002e58

080029b8 <memchr>:
 80029b8:	b510      	push	{r4, lr}
 80029ba:	b2c9      	uxtb	r1, r1
 80029bc:	4402      	add	r2, r0
 80029be:	4290      	cmp	r0, r2
 80029c0:	4603      	mov	r3, r0
 80029c2:	d101      	bne.n	80029c8 <memchr+0x10>
 80029c4:	2000      	movs	r0, #0
 80029c6:	bd10      	pop	{r4, pc}
 80029c8:	781c      	ldrb	r4, [r3, #0]
 80029ca:	3001      	adds	r0, #1
 80029cc:	428c      	cmp	r4, r1
 80029ce:	d1f6      	bne.n	80029be <memchr+0x6>
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd10      	pop	{r4, pc}

080029d4 <memcpy>:
 80029d4:	b510      	push	{r4, lr}
 80029d6:	1e43      	subs	r3, r0, #1
 80029d8:	440a      	add	r2, r1
 80029da:	4291      	cmp	r1, r2
 80029dc:	d100      	bne.n	80029e0 <memcpy+0xc>
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029e8:	e7f7      	b.n	80029da <memcpy+0x6>

080029ea <memmove>:
 80029ea:	4288      	cmp	r0, r1
 80029ec:	b510      	push	{r4, lr}
 80029ee:	eb01 0302 	add.w	r3, r1, r2
 80029f2:	d803      	bhi.n	80029fc <memmove+0x12>
 80029f4:	1e42      	subs	r2, r0, #1
 80029f6:	4299      	cmp	r1, r3
 80029f8:	d10c      	bne.n	8002a14 <memmove+0x2a>
 80029fa:	bd10      	pop	{r4, pc}
 80029fc:	4298      	cmp	r0, r3
 80029fe:	d2f9      	bcs.n	80029f4 <memmove+0xa>
 8002a00:	1881      	adds	r1, r0, r2
 8002a02:	1ad2      	subs	r2, r2, r3
 8002a04:	42d3      	cmn	r3, r2
 8002a06:	d100      	bne.n	8002a0a <memmove+0x20>
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a12:	e7f7      	b.n	8002a04 <memmove+0x1a>
 8002a14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a18:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a1c:	e7eb      	b.n	80029f6 <memmove+0xc>
	...

08002a20 <_free_r>:
 8002a20:	b538      	push	{r3, r4, r5, lr}
 8002a22:	4605      	mov	r5, r0
 8002a24:	2900      	cmp	r1, #0
 8002a26:	d043      	beq.n	8002ab0 <_free_r+0x90>
 8002a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a2c:	1f0c      	subs	r4, r1, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bfb8      	it	lt
 8002a32:	18e4      	addlt	r4, r4, r3
 8002a34:	f000 f8d4 	bl	8002be0 <__malloc_lock>
 8002a38:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <_free_r+0x94>)
 8002a3a:	6813      	ldr	r3, [r2, #0]
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	b933      	cbnz	r3, 8002a4e <_free_r+0x2e>
 8002a40:	6063      	str	r3, [r4, #4]
 8002a42:	6014      	str	r4, [r2, #0]
 8002a44:	4628      	mov	r0, r5
 8002a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a4a:	f000 b8ca 	b.w	8002be2 <__malloc_unlock>
 8002a4e:	42a3      	cmp	r3, r4
 8002a50:	d90b      	bls.n	8002a6a <_free_r+0x4a>
 8002a52:	6821      	ldr	r1, [r4, #0]
 8002a54:	1862      	adds	r2, r4, r1
 8002a56:	4293      	cmp	r3, r2
 8002a58:	bf01      	itttt	eq
 8002a5a:	681a      	ldreq	r2, [r3, #0]
 8002a5c:	685b      	ldreq	r3, [r3, #4]
 8002a5e:	1852      	addeq	r2, r2, r1
 8002a60:	6022      	streq	r2, [r4, #0]
 8002a62:	6063      	str	r3, [r4, #4]
 8002a64:	6004      	str	r4, [r0, #0]
 8002a66:	e7ed      	b.n	8002a44 <_free_r+0x24>
 8002a68:	4613      	mov	r3, r2
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	b10a      	cbz	r2, 8002a72 <_free_r+0x52>
 8002a6e:	42a2      	cmp	r2, r4
 8002a70:	d9fa      	bls.n	8002a68 <_free_r+0x48>
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	1858      	adds	r0, r3, r1
 8002a76:	42a0      	cmp	r0, r4
 8002a78:	d10b      	bne.n	8002a92 <_free_r+0x72>
 8002a7a:	6820      	ldr	r0, [r4, #0]
 8002a7c:	4401      	add	r1, r0
 8002a7e:	1858      	adds	r0, r3, r1
 8002a80:	4282      	cmp	r2, r0
 8002a82:	6019      	str	r1, [r3, #0]
 8002a84:	d1de      	bne.n	8002a44 <_free_r+0x24>
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	6852      	ldr	r2, [r2, #4]
 8002a8a:	4401      	add	r1, r0
 8002a8c:	6019      	str	r1, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	e7d8      	b.n	8002a44 <_free_r+0x24>
 8002a92:	d902      	bls.n	8002a9a <_free_r+0x7a>
 8002a94:	230c      	movs	r3, #12
 8002a96:	602b      	str	r3, [r5, #0]
 8002a98:	e7d4      	b.n	8002a44 <_free_r+0x24>
 8002a9a:	6820      	ldr	r0, [r4, #0]
 8002a9c:	1821      	adds	r1, r4, r0
 8002a9e:	428a      	cmp	r2, r1
 8002aa0:	bf01      	itttt	eq
 8002aa2:	6811      	ldreq	r1, [r2, #0]
 8002aa4:	6852      	ldreq	r2, [r2, #4]
 8002aa6:	1809      	addeq	r1, r1, r0
 8002aa8:	6021      	streq	r1, [r4, #0]
 8002aaa:	6062      	str	r2, [r4, #4]
 8002aac:	605c      	str	r4, [r3, #4]
 8002aae:	e7c9      	b.n	8002a44 <_free_r+0x24>
 8002ab0:	bd38      	pop	{r3, r4, r5, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200000d0 	.word	0x200000d0

08002ab8 <_malloc_r>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	1ccd      	adds	r5, r1, #3
 8002abc:	f025 0503 	bic.w	r5, r5, #3
 8002ac0:	3508      	adds	r5, #8
 8002ac2:	2d0c      	cmp	r5, #12
 8002ac4:	bf38      	it	cc
 8002ac6:	250c      	movcc	r5, #12
 8002ac8:	2d00      	cmp	r5, #0
 8002aca:	4606      	mov	r6, r0
 8002acc:	db01      	blt.n	8002ad2 <_malloc_r+0x1a>
 8002ace:	42a9      	cmp	r1, r5
 8002ad0:	d903      	bls.n	8002ada <_malloc_r+0x22>
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	6033      	str	r3, [r6, #0]
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	bd70      	pop	{r4, r5, r6, pc}
 8002ada:	f000 f881 	bl	8002be0 <__malloc_lock>
 8002ade:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <_malloc_r+0xb4>)
 8002ae0:	6814      	ldr	r4, [r2, #0]
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	b991      	cbnz	r1, 8002b0c <_malloc_r+0x54>
 8002ae6:	4c22      	ldr	r4, [pc, #136]	; (8002b70 <_malloc_r+0xb8>)
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	b91b      	cbnz	r3, 8002af4 <_malloc_r+0x3c>
 8002aec:	4630      	mov	r0, r6
 8002aee:	f000 f867 	bl	8002bc0 <_sbrk_r>
 8002af2:	6020      	str	r0, [r4, #0]
 8002af4:	4629      	mov	r1, r5
 8002af6:	4630      	mov	r0, r6
 8002af8:	f000 f862 	bl	8002bc0 <_sbrk_r>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d126      	bne.n	8002b4e <_malloc_r+0x96>
 8002b00:	230c      	movs	r3, #12
 8002b02:	4630      	mov	r0, r6
 8002b04:	6033      	str	r3, [r6, #0]
 8002b06:	f000 f86c 	bl	8002be2 <__malloc_unlock>
 8002b0a:	e7e4      	b.n	8002ad6 <_malloc_r+0x1e>
 8002b0c:	680b      	ldr	r3, [r1, #0]
 8002b0e:	1b5b      	subs	r3, r3, r5
 8002b10:	d41a      	bmi.n	8002b48 <_malloc_r+0x90>
 8002b12:	2b0b      	cmp	r3, #11
 8002b14:	d90f      	bls.n	8002b36 <_malloc_r+0x7e>
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	18cc      	adds	r4, r1, r3
 8002b1a:	50cd      	str	r5, [r1, r3]
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f000 f860 	bl	8002be2 <__malloc_unlock>
 8002b22:	f104 000b 	add.w	r0, r4, #11
 8002b26:	1d23      	adds	r3, r4, #4
 8002b28:	f020 0007 	bic.w	r0, r0, #7
 8002b2c:	1ac3      	subs	r3, r0, r3
 8002b2e:	d01b      	beq.n	8002b68 <_malloc_r+0xb0>
 8002b30:	425a      	negs	r2, r3
 8002b32:	50e2      	str	r2, [r4, r3]
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
 8002b36:	428c      	cmp	r4, r1
 8002b38:	bf0b      	itete	eq
 8002b3a:	6863      	ldreq	r3, [r4, #4]
 8002b3c:	684b      	ldrne	r3, [r1, #4]
 8002b3e:	6013      	streq	r3, [r2, #0]
 8002b40:	6063      	strne	r3, [r4, #4]
 8002b42:	bf18      	it	ne
 8002b44:	460c      	movne	r4, r1
 8002b46:	e7e9      	b.n	8002b1c <_malloc_r+0x64>
 8002b48:	460c      	mov	r4, r1
 8002b4a:	6849      	ldr	r1, [r1, #4]
 8002b4c:	e7ca      	b.n	8002ae4 <_malloc_r+0x2c>
 8002b4e:	1cc4      	adds	r4, r0, #3
 8002b50:	f024 0403 	bic.w	r4, r4, #3
 8002b54:	42a0      	cmp	r0, r4
 8002b56:	d005      	beq.n	8002b64 <_malloc_r+0xac>
 8002b58:	1a21      	subs	r1, r4, r0
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f000 f830 	bl	8002bc0 <_sbrk_r>
 8002b60:	3001      	adds	r0, #1
 8002b62:	d0cd      	beq.n	8002b00 <_malloc_r+0x48>
 8002b64:	6025      	str	r5, [r4, #0]
 8002b66:	e7d9      	b.n	8002b1c <_malloc_r+0x64>
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200000d0 	.word	0x200000d0
 8002b70:	200000d4 	.word	0x200000d4

08002b74 <_realloc_r>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	4607      	mov	r7, r0
 8002b78:	4614      	mov	r4, r2
 8002b7a:	460e      	mov	r6, r1
 8002b7c:	b921      	cbnz	r1, 8002b88 <_realloc_r+0x14>
 8002b7e:	4611      	mov	r1, r2
 8002b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b84:	f7ff bf98 	b.w	8002ab8 <_malloc_r>
 8002b88:	b922      	cbnz	r2, 8002b94 <_realloc_r+0x20>
 8002b8a:	f7ff ff49 	bl	8002a20 <_free_r>
 8002b8e:	4625      	mov	r5, r4
 8002b90:	4628      	mov	r0, r5
 8002b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b94:	f000 f826 	bl	8002be4 <_malloc_usable_size_r>
 8002b98:	4284      	cmp	r4, r0
 8002b9a:	d90f      	bls.n	8002bbc <_realloc_r+0x48>
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	f7ff ff8a 	bl	8002ab8 <_malloc_r>
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d0f2      	beq.n	8002b90 <_realloc_r+0x1c>
 8002baa:	4631      	mov	r1, r6
 8002bac:	4622      	mov	r2, r4
 8002bae:	f7ff ff11 	bl	80029d4 <memcpy>
 8002bb2:	4631      	mov	r1, r6
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	f7ff ff33 	bl	8002a20 <_free_r>
 8002bba:	e7e9      	b.n	8002b90 <_realloc_r+0x1c>
 8002bbc:	4635      	mov	r5, r6
 8002bbe:	e7e7      	b.n	8002b90 <_realloc_r+0x1c>

08002bc0 <_sbrk_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4c05      	ldr	r4, [pc, #20]	; (8002bdc <_sbrk_r+0x1c>)
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	f7fe fd04 	bl	80015d8 <_sbrk>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_sbrk_r+0x1a>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_sbrk_r+0x1a>
 8002bd8:	602b      	str	r3, [r5, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	2000019c 	.word	0x2000019c

08002be0 <__malloc_lock>:
 8002be0:	4770      	bx	lr

08002be2 <__malloc_unlock>:
 8002be2:	4770      	bx	lr

08002be4 <_malloc_usable_size_r>:
 8002be4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002be8:	2800      	cmp	r0, #0
 8002bea:	f1a0 0004 	sub.w	r0, r0, #4
 8002bee:	bfbc      	itt	lt
 8002bf0:	580b      	ldrlt	r3, [r1, r0]
 8002bf2:	18c0      	addlt	r0, r0, r3
 8002bf4:	4770      	bx	lr
	...

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
